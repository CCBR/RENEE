{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#renee-rna-sequencing-analysis-pipeline","title":"RENEE - Rna sEquencing aNalysis pipElinE","text":"<p>An open-source, reproducible, and scalable solution for analyzing RNA-seq data.</p> <p> </p> <p>See the website for detailed information, documentation, and examples: https://ccbr.github.io/RENEE/latest/</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>RENEE - Rna sEquencing aNalysis pipElinE</li> <li>Table of Contents</li> <li>1. Introduction</li> <li>2. Overview<ul> <li>2.1 RENEE Pipeline</li> <li>2.2 Reference Genomes</li> <li>2.3 Dependencies</li> </ul> </li> <li>3. Run RENEE pipeline<ul> <li>3.1 Biowulf</li> <li>3.2 FRCE</li> </ul> </li> <li>4. References</li> <li>5. Version Notes</li> </ul>"},{"location":"#1-introduction","title":"1. Introduction","text":"<p>RNA-sequencing (RNA-seq) has a wide variety of applications. This popular transcriptome profiling technique can be used to quantify gene and isoform expression, detect alternative splicing events, predict gene-fusions, call variants and much more.</p> <p>RENEE is a comprehensive, open-source RNA-seq pipeline that relies on technologies like Docker<sup>20</sup> and Singularity<sup>21</sup>... now called Apptainer to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake<sup>19</sup>, a flexible and scalable workflow management system, to submit jobs to a cluster or cloud provider.</p> <p> <sup>Fig 1. Run locally on a compute instance, on-premise using a cluster, or on the cloud using AWS. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM, or run on AWS using Tibanna (feature coming soon!). A hybrid approach ensures the pipeline is accessible to all users. As an optional step, relevelant output files and metadata can be stored in object storage using HPC DME (NIH users) or Amazon S3 for archival purposes (coming soon!).</sup></p>"},{"location":"#2-overview","title":"2. Overview","text":""},{"location":"#21-renee-pipeline","title":"2.1 RENEE Pipeline","text":"<p>A bioinformatics pipeline is more than the sum of its data processing steps. A pipeline without quality-control steps provides a myopic view of the potential sources of variation within your data (i.e., biological verses technical sources of variation). RENEE pipeline is composed of a series of quality-control and data processing steps.</p> <p>The accuracy of the downstream interpretations made from transcriptomic data are highly dependent on initial sample library. Unwanted sources of technical variation, which if not accounted for properly, can influence the results. RENEE's comprehensive quality-control helps ensure your results are reliable and reproducible across experiments. In the data processing steps, RENEE quantifies gene and isoform expression and predicts gene fusions. Please note that the detection of alternative splicing events and variant calling will be incorporated in a later release.</p> <p> <sup>Fig 2. An Overview of RENEE Pipeline. Gene and isoform counts are quantified and a series of QC-checks are performed to assess the quality of the data. This pipeline stops at the generation of a raw counts matrix and gene-fusion calling. To run the pipeline, a user must select their raw data, a reference genome, and output directory (i.e., the location where the pipeline performs the analysis). Quality-control information is summarized across all samples in a MultiQC report.</sup></p> <p>Quality Control FastQC<sup>2</sup> is used to assess the sequencing quality. FastQC is run twice, before and after adapter trimming. It generates a set of basic statistics to identify problems that can arise during sequencing or library preparation. FastQC will summarize per base and per read QC metrics such as quality scores and GC content. It will also summarize the distribution of sequence lengths and will report the presence of adapter sequences.</p> <p>Kraken2<sup>14</sup> and FastQ Screen<sup>17</sup> are used to screen for various sources of contamination. During the process of sample collection to library preparation, there is a risk for introducing wanted sources of DNA. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. Also, if there are high levels of microbial contamination, Kraken can provide an estimation of the taxonomic composition. Kraken can be used in conjunction with Krona<sup>15</sup> to produce interactive reports.</p> <p>Preseq<sup>1</sup> is used to estimate the complexity of a library for each samples. If the duplication rate is very high, the overall library complexity will be low. Low library complexity could signal an issue with library preparation where very little input RNA was over-amplified or the sample may be degraded.</p> <p>Picard<sup>10</sup> can be used to estimate the duplication rate, and it has another particularly useful sub-command called CollectRNAseqMetrics which reports the number and percentage of reads that align to various regions: such as coding, intronic, UTR, intergenic and ribosomal regions. This is particularly useful as you would expect a library constructed with ploy(A)-selection to have a high percentage of reads that map to coding regions. Picard CollectRNAseqMetrics will also report the uniformity of coverage across all genes, which is useful for determining whether a sample has a 3' bias (observed in ploy(A)-selection libraries containing degraded RNA).</p> <p>RSeQC<sup>9</sup> is another particularity useful package that is tailored for RNA-seq data. It is used to calculate the inner distance between paired-end reads and calculate TIN values for a set of canonical protein-coding transcripts. A median TIN value is calucated for each sample, which analogous to a computationally derived RIN.</p> <p>MultiQC<sup>11</sup> is used to aggregate the results of each tool into a single interactive report.</p> <p>Quantification Cutadapt<sup>3</sup> is used to remove adapter sequences, perform quality trimming, and remove very short sequences that would otherwise multi-map all over the genome prior to alignment.</p> <p>STAR<sup>4</sup> is used to align reads to the reference genome. The RENEE pipeline runs STAR in a two-passes where splice-junctions are collected and aggregated across all samples and provided to the second-pass of STAR. In the second pass of STAR, the splice-junctions detected in the first pass are inserted into the genome indices prior to alignment.</p> <p>RSEM<sup>5</sup> is used to quantify gene and isoform expression. The expected counts from RSEM are merged across samples to create a two counts matrices for gene counts and isoform counts.</p> <p>Arriba<sup>22</sup> is used to predict gene-fusion events. The pre-built human and mouse reference genomes use Arriba blacklists to reduce the false-positive rate.</p>"},{"location":"#22-reference-genomes","title":"2.2 Reference Genomes","text":"<p>Pre-built reference genomes are provided on Biowulf and FRCE for a number of different annotation versions, view the list here: https://ccbr.github.io/RENEE/latest/RNA-seq/Resources/#1-reference-genomes</p> <p>If you would like to use a custom reference that is not already listed above, you can prepare it with the <code>renee build</code> command. See docs here: https://ccbr.github.io/RENEE/latest/RNA-seq/build/</p>"},{"location":"#23-dependencies","title":"2.3 Dependencies","text":"<p>Requires: <code>singularity&gt;=3.5</code> <code>snakemake&gt;=6.0</code></p> <p>NOTE: Biowulf users: Both, singularity and snakemake, modules are already installed and available for all Biowulf users. Please skip this step as <code>module load ccbrpipeliner</code> will preload singularity and snakemake.</p> <p>Snakemake and singularity must be installed on the target system. Snakemake orchestrates the execution of each step in the pipeline. To guarantee reproducibility, each step relies on pre-built images from DockerHub. Snakemake pulls these docker images while converting them to singularity on the fly and saves them onto the local filesystem prior to job execution, and as so, snakemake and singularity are the only two dependencies.</p> <p> Back to Top </p>"},{"location":"#3-run-renee-pipeline","title":"3. Run RENEE pipeline","text":""},{"location":"#31-biowulf","title":"3.1 Biowulf","text":"<pre><code># RENEE is configured to use different execution backends: local or slurm\n# view the help page for more information\nmodule load ccbrpipeliner\nrenee run --help\n\n# @local: uses local singularity execution method\n# The local MODE will run serially on compute\n# instance. This is useful for testing, debugging,\n# or when a users does not have access to a high\n# performance computing environment.\n# Please note that you can dry-run the command below\n# by providing the --dry-run flag\n# Do not run this on the head node!\n# Grab an interactive node\nsinteractive --mem=110g --cpus-per-task=12 --gres=lscratch:200\nmodule load ccbrpipeliner\nrenee run --input .tests/*.R?.fastq.gz --output /data/$USER/RNA_hg38 --genome hg38_36 --mode local\n\n# @slurm: uses slurm and singularity execution method\n# The slurm MODE will submit jobs to the cluster.\n# The --sif-cache flag will re-use singularity containers from a shared location.\n# It is recommended running RENEE in this mode.\nmodule load ccbrpipeliner\nrenee run \\\n  --input .tests/*.R?.fastq.gz \\\n  --output /data/$USER/RNA_hg38 \\\n  --genome hg38_36 \\\n  --mode slurm \\\n  --sif-cache /data/CCBR_Pipeliner/SIFs\n</code></pre>"},{"location":"#32-frce","title":"3.2 FRCE","text":"<pre><code># grab an interactive node\nsrun --export all --pty --x11 bash\n\n# add renee to path correctly\n. /mnt/projects/CCBR-Pipelines/pipelines/guis/latest/bin/setup\n\n# run renee\nrenee --help\n</code></pre> <p>When running renee on FRCE, we recommend setting <code>--tmp-dir</code> and <code>--sif-cache</code> with the following values:</p> <pre><code>renee run \\\n  --input .tests/*.R?.fastq.gz \\\n  --output /scratch/cluster_scratch/$USER/RNA_hg38 \\\n  --genome hg38_36 \\\n  --mode slurm \\\n  --tmp-dir /scratch/cluster_scratch/$USER \\\n  --sif-cache /mnt/projects/CCBR-Pipelines/SIFs\n</code></pre> <p> Back to Top </p>"},{"location":"#4-references","title":"4. References","text":"<p><sup>1. Daley, T. and A.D. Smith, Predicting the molecular complexity of sequencing libraries. Nat Methods, 2013. 10(4): p. 325-7.</sup> <sup>2. Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data.</sup> <sup>3. Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12.</sup> <sup>4. Dobin, A., et al., STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 2013. 29(1): p. 15-21.</sup> <sup>5. Li, B. and C.N. Dewey, RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics, 2011. 12: p. 323.</sup> <sup>6. Harrow, J., et al., GENCODE: the reference human genome annotation for The ENCODE Project. Genome Res, 2012. 22(9): p. 1760-74.</sup> <sup>7. Law, C.W., et al., voom: Precision weights unlock linear model analysis tools for RNA-seq read counts. Genome Biol, 2014. 15(2): p. R29.</sup> <sup>8. Smyth, G.K., Linear models and empirical bayes methods for assessing differential expression in microarray experiments. Stat Appl Genet Mol Biol, 2004. 3: p. Article3.</sup> <sup>9. Wang, L., et al. (2012). \"RSeQC: quality control of RNA-seq experiments.\" Bioinformatics 28(16): 2184-2185.</sup> <sup>10. The Picard toolkit. https://broadinstitute.github.io/picard/.</sup> <sup>11. Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048.</sup> <sup>12. R Core Team (2018). R: A Language and Environment for Statistical Computing. Vienna, Austria, R Foundation for Statistical Computing.</sup> <sup>13. Li, H., et al. (2009). \"The Sequence Alignment/Map format and SAMtools.\" Bioinformatics 25(16): 2078-2079.</sup> <sup>14. Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46.</sup> <sup>15. Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385.</sup> <sup>16. Okonechnikov, K., et al. (2015). \"Qualimap 2: advanced multi-sample quality control for high-throughput sequencing data.\" Bioinformatics 32(2): 292-294.</sup> <sup>17. Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338.</sup> <sup>18. Robinson, M. D., et al. (2009). \"edgeR: a Bioconductor package for differential expression analysis of digital gene expression data.\" Bioinformatics 26(1): 139-140.</sup> <sup>19. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.</sup> <sup>20. Merkel, D. (2014). Docker: lightweight linux containers for consistent development and deployment. Linux Journal, 2014(239), 2.</sup> <sup>21. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459.</sup> <sup>22. Haas, B. J., et al. (2019). \"Accuracy assessment of fusion transcript detection via read-mapping and de novo fusion transcript assembly-based methods.\" Genome Biology 20(1): 213.</sup></p> <p> Back to Top </p>"},{"location":"contributing/","title":"Contributing to RENEE","text":""},{"location":"contributing/#proposing-changes-with-issues","title":"Proposing changes with issues","text":"<p>If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed.</p> <p>If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it.</p>"},{"location":"contributing/#pull-request-process","title":"Pull request process","text":"<p>We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to RENEE.</p> <p></p>"},{"location":"contributing/#clone-the-repo","title":"Clone the repo","text":"<p>If you are a member of CCBR, you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once.</p> <pre><code>git clone https://github.com/CCBR/RENEE\n</code></pre> <p>Cloning into 'RENEE'...  remote: Enumerating objects: 1136, done.  remote: Counting objects: 100% (463/463), done.  remote: Compressing objects: 100% (357/357), done.  remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673  Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done.  Resolving deltas: 100% (530/530), done. </p> <pre><code>cd RENEE\n</code></pre>"},{"location":"contributing/#if-this-is-your-first-time-cloning-the-repo-you-may-need-to-install-dependencies","title":"If this is your first time cloning the repo, you may need to install dependencies","text":"<ul> <li> <p>Install snakemake and singularity or docker if needed (biowulf already has these available as modules).</p> </li> <li> <p>Install the python dependencies with pip</p> </li> </ul> <pre><code>pip install .\n</code></pre> <p>If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed</p> <pre><code>. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n</code></pre> <ul> <li>Install <code>pre-commit</code> if you don't already   have it. Then from the repo's root directory, run</li> </ul> <pre><code>pre-commit install\n</code></pre> <p>This will install the repo's pre-commit hooks.   You'll only need to do this step the first time you clone the repo.</p>"},{"location":"contributing/#create-a-branch","title":"Create a branch","text":"<p>Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as <code>iss-10</code> if it is for a specific issue.</p> <pre><code># create a new branch and switch to it\ngit branch iss-10\ngit switch iss-10\n</code></pre> <p>Switched to a new branch 'iss-10'</p>"},{"location":"contributing/#make-your-changes","title":"Make your changes","text":"<p>Edit the code, write and run tests, and update the documentation as needed.</p>"},{"location":"contributing/#test","title":"test","text":"<p>Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the <code>tests/</code> subdirectory. Run the tests with <code>python -m pytest</code>.</p> <p>If you change the workflow, please run the workflow with the test profile and make sure your new feature or bug fix works as intended.</p>"},{"location":"contributing/#document","title":"document","text":"<p>If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in <code>docs/</code>.</p>"},{"location":"contributing/#commit-and-push-your-changes","title":"Commit and push your changes","text":"<p>If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/</p> <p>First, add the files that you changed to the staging area:</p> <pre><code>git add path/to/changed/files/\n</code></pre> <p>Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as <code>feat</code>, <code>fix</code>, <code>docs</code>, etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages.</p> <pre><code>git commit -m 'feat: create function for awesome feature'\n</code></pre> <p>pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Failed </p> <ul> <li>hook id: trailing-whitespace </li> <li>exit code: 1 </li> <li>files were modified by this hook  &gt;    Fixing path/to/changed/files/file.txt  &gt;    codespell................................................................Passed    style-files..........................................(no files to check)Skipped    readme-rmd-rendered..................................(no files to check)Skipped    use-tidy-description.................................(no files to check)Skipped </li> </ul> <p>In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run <code>git diff</code> to see the changes that pre-commit made and <code>git status</code> to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command:</p> <pre><code>git add path/to/changed/files/file.txt\ngit commit -m 'feat: create function for awesome feature'\n</code></pre> <p>This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Passed  codespell................................................................Passed  style-files..........................................(no files to check)Skipped  readme-rmd-rendered..................................(no files to check)Skipped  use-tidy-description.................................(no files to check)Skipped  Conventional Commit......................................................Passed  &gt; [iss-10 9ff256e] feat: create function for awesome feature  1 file changed, 22 insertions(+), 3 deletions(-) </p> <p>Finally, push your changes to GitHub:</p> <pre><code>git push\n</code></pre> <p>If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch:</p> <pre><code>git push --set-upstream origin iss-10\n</code></pre> <p>Enumerating objects: 7, done.  Counting objects: 100% (7/7), done.  Delta compression using up to 10 threads  Compressing objects: 100% (4/4), done.  Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done.  Total 4 (delta 3), reused 0 (delta 0), pack-reused 0  remote: Resolving deltas: 100% (3/3), completed with 3 local objects.  remote:  remote: Create a pull request for 'iss-10' on GitHub by visiting:  remote: https://github.com/CCBR/RENEE/pull/new/iss-10  remote:  To https://github.com/CCBR/RENEE  &gt;  &gt; [new branch] iss-10 -&gt; iss-10  branch 'iss-10' set up to track 'origin/iss-10'. </p> <p>We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at <code>https://github.com/CCBR/RENEE/tree/&lt;your-branch-name&gt;</code> (replace <code>&lt;your-branch-name&gt;</code> with the actual name of your branch).</p>"},{"location":"contributing/#create-the-pr","title":"Create the PR","text":"<p>Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/RENEE/pull/new/</p> <p>Select the branch you just pushed:</p> <p></p> <p>Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <code>&lt;!--</code> and <code>--&gt;</code>) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it.</p> <p></p> <p>Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready.</p>"},{"location":"contributing/#wait-for-a-maintainer-to-review-your-pr","title":"Wait for a maintainer to review your PR","text":"<p>We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/. The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR.</p> <p>Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution!</p>"},{"location":"contributing/#after-your-pr-has-been-merged","title":"After your PR has been merged","text":"<p>After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes:</p> <pre><code>git checkout main\ngit pull\n</code></pre> <p>It's a good idea to run <code>git pull</code> before creating a new branch so it will start from the most recent commits in main.</p>"},{"location":"contributing/#helpful-links-for-more-information","title":"Helpful links for more information","text":"<ul> <li>GitHub Flow</li> <li>semantic versioning guidelines</li> <li>changelog guidelines</li> <li>tidyverse code review principles</li> <li>reproducible examples</li> <li>nf-core extensions for VS Code</li> </ul>"},{"location":"general-questions/","title":"General Questions","text":"<p>If you are experiencing an issue, please read through this list first before contacting our team.</p> <p>We have compiled this FAQ from the most common questions. If you have a question that is not on this page, please feel free to reach out to our team.</p>"},{"location":"general-questions/#contribute","title":"Contribute","text":"<p>Q. I would like to contribute to RNA-seek. How do I get involved?</p> <p>A. There are several ways you can get involved with the project.</p> <p>If you have added new features or adding new changes, please consider contributing them back to the original repository:</p> <ol> <li>Fork the original repo to a personal or org account.</li> <li>Clone the fork to your local filesystem.</li> <li>Copy the modified files to the cloned fork.</li> <li>Commit and push your changes to your fork.</li> <li>Create a pull request to this repository.</li> </ol> <p>If you would like to create or tackle an issue, please reference our issue tracker on Github.</p> <p>Also, feel free to like or  the project on Github!</p>"},{"location":"general-questions/#additional-support","title":"Additional Support","text":"<p>Q. I have a few questions about the pipeline. How can I reach you? A. For general questions and/or support, please free to open an issue on Github or send an email to CCBR</p>"},{"location":"license/","title":"MIT License","text":"<p>Copyright \u00a9 2023 CCBR</p> <p><sub>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</sub></p> <p><sub>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</sub></p> <p><sub>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</sub></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>If you are experiencing an issue, please read through this list first before contacting our team.</p> <p>We have compiled this FAQ from the most common problems. If you are running into an issue that is not on this page, please feel free to reach out to our team.</p>"},{"location":"troubleshooting/#job-status","title":"Job Status","text":"<p>Q: How do I know if RENEE pipeline finished running? How to check status of each job?</p> <p>A. Once the pipeline is done running to completion, you will receive an email with header like</p> <p><code>Slurm Job_id=xxxx Name=pl:renee Ended, Run time xx:xx:xx, COMPLETED, ExitCode 0</code></p> <p>To check the status of each individual job submitted to the cluster, there are several different ways. Here are a few suggestions:</p> <p>Check Job Status</p> Biowulf Dashboard <p>You can check the status of Biowulf jobs through the your user dashboard.</p> <p>Each job that RENEE submits to the cluster starts with the <code>pl:</code> prefix.</p> Query Job Scheduler <p>SLURM has built-in commands that allow a user to view the status of jobs submitted to the cluster.</p> <p>Method 1: To see what jobs you have running, run the following command: <pre><code>squeue -u $USER\n</code></pre></p> <p>Method 2 You can also run this alternative command to check the status of your running jobs: <pre><code>sjobs\n</code></pre></p> <p>Each job that RENEE submits to the cluster starts with the <code>pl:</code> prefix.</p> <p>Q: What if the pipeline is finished running but I received a \"FAILED\" status? How do I identify failed jobs?</p> <p>A. In case there was some error during the run, the easiest way to diagnose the problem is to go to logfiles folder within the RENEE output folder and look at the <code>snakemake.log.jobby.short</code> file. It contains three columns: jobname, state, and std_err. The jobs that completed successfully would have \"COMPLETED\" state and jobs that failed would have the FAILED state.</p> <p>Find Failed Jobs</p> SLURM output files <p>All the failed jobs would be listed with absolute paths to the error file (with extension <code>.err</code>). Go through the error files corresponding to the FAILED jobs (std_err) to explore why the job failed.</p> <pre><code># Go to the logfiles folder within the renee output folder\ncd renee_output/logfiles\n\n# List the files that failed\ngrep \"FAILED\" snakemake.log.jobby.short | less\n</code></pre> <p>Many failures are caused by filesystem or network issues on Biowulf, and in such cases, simply re-starting the Pipeline should resolve the issue. Snakemake will dynamically determine which steps have been completed, and which steps still need to be run. If you are still running into problems after re-running the pipeline, there may be another issue. If that is the case, please feel free to contact us.</p> <p>Q. How do I cancel ongoing RENEE jobs?</p> <p>A. Sometimes, you might need to manually stop a RENEE run prematurely, perhaps because the run was configured incorrectly or if a job is stalled. Although the walltime limits will eventually stop the workflow, this can take up to 5 or 10 days depending on the pipeline.</p> <p>To stop RENEE jobs that are currently running, you can follow these options.</p> <p>Cancel running jobs</p> Master Job <p>You can use the <code>sjobs</code> tool provided by Biowulf to monitor ongoing jobs.</p> <p>Examine the <code>NAME</code> column of the <code>sjobs</code> output, one of them should match <code>pl:renee</code>. This is the \"primary\" job that orchestrates the submission of child jobs as the pipeline completes. Terminating this job will ensure that the pipeline is cancelled; however, you will likely need to unlock the working directory before re-running renee again. Please see our instructions below in <code>Error: Directory cannot be locked</code> for how to unlock a working directory.</p> <p>You can manually cancel the primary job using <code>scancel</code>.</p> <p>However, secondary jobs that are already running will continue to completion (or failure).  To stop them immediately, you will need to run <code>scancel</code> individually for each secondary job. See the next tab for a bash script that tries to automate this process.</p> Child Jobs <p>When there are lots of secondary jobs running, or if you have multiple RENEE runs ongoing simultaneously, it's not feasible to manually cancel jobs based on the <code>sjobs</code> output (see previous tab).</p> <p>We provide a script that will parse the snakemake log file and cancel all jobs listed within.</p> <pre><code>## Download the script (to the current directory)\nwget https://raw.githubusercontent.com/CCBR/Tools/c3324fc0ad2f9858438c84bbb2f24927a8f3a220/scripts/cancel_snakemake_jobs.sh\n\n## Run the script\nbash cancel_snakemake_jobs.sh /path/to/output/logfiles/snakemake.log\n</code></pre> <p>The script accepts one argument, which should be the path to the snakemake log file.  This will work for any log output from Snakemake.</p> <p>This script will NOT cancel the primary job, which you will still have to identify and cancel manually, as described in the previous tab.</p> <p>Once you've ensured that all running jobs have been stopped, you need to unlock the working directory (see below), and re-run RENEE to resume the pipeline.</p>"},{"location":"troubleshooting/#job-errors","title":"Job Errors","text":"<p>Q. Why am I getting <code>sbatch: command not found error</code>?</p> <p>A. Are you running the <code>renee</code> on <code>helix.nih.gov</code> by mistake? Helix does not have a job scheduler. One may be able to fire up the singularity module, initial working directory and perform dry-run on <code>helix</code>. But to submit jobs, you need to log into <code>biowulf</code> using <code>ssh -Y username@biowulf.nih.gov</code>.</p> <p>Q. Why am I getting a message saying <code>Error: Directory cannot be locked. ...</code> when I do the dry-run?</p> <p>A. This is caused when a run is stopped prematurely, either accidentally or on purpose, or the pipeline is still running in your working directory. Snakemake will lock a working directory to prevent two concurrent pipelines from writing to the same location. This can be remedied easily by running <code>renee unlock</code> sub command. Please check to see if the pipeline is still running prior to running the commands below. If you would like to cancel a submitted or running pipeline, please reference the instructions above.</p> <pre><code># Load Dependencies\nmodule load ccbrpipeliner\n\n# Unlock the working directory\nrenee unlock --output /path/to/working/dir\n</code></pre> <p>Q. Why am I getting a message saying <code>MissingInputException in line ...</code> when I do the dry-run?</p> <p>A. This error usually occurs when snakemake is terminated ungracefully. Did you forcefully cancel a running pipeline? Or did one of your running pipelines abruptly end? Either way, the solution is straight-forward. Please go to your pipeline's output directory, and rename or delete the following hidden directory: <code>.snakemake/</code>. This directory contains metadata pertaining any snakemake runs inside that working directory. Sometimes when a pipeline is pre-maturely or forcefully terminated, a few files related to tracking temp() files are not deleted and snakemake raises a MissingInputException.</p> <pre><code># Navigate to working directory\ncd /path/to/working/dir\n\n# Rename .snakemake directory to something else\n# And try re-dry running the pipeline\nmv .snakemake .old_snakemake\n</code></pre>"},{"location":"RNA-seq/Resources/","title":"Resources","text":""},{"location":"RNA-seq/Resources/#1-reference-genomes","title":"1. Reference genomes","text":"<p>On Biowulf, RENEE comes bundled with the following pre-built GENCODE<sup>1</sup> reference genomes:</p> <p>As of RENEE v2.6.0, all hg19 and hg38 indices were built using the NCI Genomic Data Commons reference fasta, which contains the primary genome from Encode plus virus and decoy sequences. The hg38 fasta files were downloaded from the GDC with virus and decoy sequences already added, while these sequences were manually added to the hg19 fasta from Encode. See details here: https://github.com/CCBR/build-renee-refs</p> Genome Species Annotation Version Notes hg19_19 Homo sapiens (human) Gencode Release 19 GRCh37, Annotation Release date: 07/2013 hg19_36 Homo sapiens (human) Gencode Release 36-lift-37 GRCh37 hg38_30 Homo sapiens (human) Gencode Release 30 GRCh38, Annotation Release date: 11/2018 hg38_34 Homo sapiens (human) Gencode Release 34 GRCh38, Annotation Release date: 04/2020 hg38_36 Homo sapiens (human) Gencode Release 36 GRCh38, Annotation Release date: 05/2020 hg38_38 Homo sapiens (human) Gencode Release 38 GRCh38, Annotation Release date: 05/2021 hg38_41 Homo sapiens (human) Gencode Release 41 GRCh38, Annotation Release date: 07/2022 hg38_45 Homo sapiens (human) Gencode Release 45 GRCh38, Annotation Release date: 03/2023 mm10_M21 Mus musculus (mouse) Gencode Release M21 GRCm38, Annotation Release date: 04/2019 mm10_M23 Mus musculus (mouse) Gencode Release M23 GRCm38, Annotation Release date: 09/2019 mm10_M25 Mus musculus (mouse) Gencode Release M25 GRCm38, Annotation Release date: 04/2020 <p>You can run <code>renee run --help</code> to view the most up-to-date list of genome annotations available in your installation of RENEE.</p> <p>Note: Newer annotations versions may be added upon request and may be already available. Please contact Vishal Koparde for details.</p> <p>However, building new reference genomes is easy!</p> <p>If you do not have access to Biowulf or you are looking for a reference genome and/or annotation that is currently not available, it can be built with RENEE's build sub-command. Given a genomic FASTA file (ref.fa) and a GTF file (genes.gtf), <code>renee build</code> will create all of the required reference files to run the RENEE pipeline. Once the build pipeline completes, you can supply the newly generated reference.json to the <code>--genome</code> of <code>renee run</code>. For more information, please see the help page for the run and build sub commands.</p>"},{"location":"RNA-seq/Resources/#2-tools-and-versions","title":"2. Tools and versions","text":"<p>Raw data &gt; Adapter Trimming &gt; Alignment &gt; Quantification (genes and isoforms, gene-fusions)</p> Tool Version Docker Notes FastQC<sup>2</sup> 0.11.9 nciccbr/ccbr_fastqc_0.11.9 Quality-control step to assess sequencing quality, run before and after adapter trimming Cutadapt<sup>3</sup> 1.18 nciccbr/ccbr_cutadapt_1.18 Data processing step to remove adapter sequences and perform quality trimming Kraken<sup>4</sup> 2.1.1 nciccbr/ccbr_kraken_v2.1.1 Quality-control step to assess microbial taxonomic composition KronaTools<sup>5</sup> 2.7.1 nciccbr/ccbr_kraken_v2.1.1 Quality-control step to visualize kraken output FastQ Screen<sup>6</sup> 0.13.0 nciccbr/ccbr_fastq_screen_0.13.0 Quality-control step to assess contamination; additional dependencies: <code>bowtie2/2.3.4</code>, <code>perl/5.24.3</code> STAR<sup>7</sup> 2.7.6a nciccbr/ccbr_arriba_2.0.0 Data processing step to align reads against reference genome (using its two-pass mode) bbtools<sup>8</sup> 38.87 nciccbr/ccbr_bbtools_38.87 Quality-control step to calculate insert_size of assembled reads pairs with <code>bbmerge</code> QualiMap<sup>9</sup> 2.2.1 nciccbr/ccbr_qualimap Quality-control step to assess various alignment metrics Picard<sup>10</sup> 2.18.20 nciccbr/ccbr_picard Quality-control step to run <code>MarkDuplicates</code>, <code>CollectRnaSeqMetrics</code> and <code>AddOrReplaceReadGroups</code> Preseq<sup>11</sup> 2.0.3 nciccbr/ccbr_preseq Quality-control step to estimate library complexity SAMtools<sup>12</sup> 1.7 nciccbr/ccbr_arriba_2.0.0 Quality-control step to run <code>flagstat</code> to calculate alignment statistics bam2strandedbw custom nciccbr/ccbr_bam2strandedbw Summarization step to convert STAR aligned PE bam file into forward and reverse strand bigwigs suitable for a genomic track viewer like IGV RSeQC<sup>13</sup> 4.0.0 nciccbr/ccbr_rseqc_4.0.0 Quality-control step to infer stranded-ness and read distributions over specific genomic features RSEM<sup>14</sup> 1.3.3 nciccbr/ccbr_rsem_1.3.3 Data processing step to quantify gene and isoform counts Arriba<sup>15<sup> 2.0.0 nciccbr/ccbr_arriba_2.0.0 Data processing step to quantify gene-fusions RNA Report custom nciccbr/ccbr_rna Summarization step to identify outliers and assess technical sources of variation MultiQC<sup>16</sup> 1.12 skchronicles/multiqc Reporting step to aggregate sample statistics and quality-control information across all sample"},{"location":"RNA-seq/Resources/#3-acknowledgements","title":"3. Acknowledgements","text":""},{"location":"RNA-seq/Resources/#31-biowulf","title":"3.1 Biowulf","text":"<p>If you utilized NIH's Biowulf cluster to run RENEE, please do not forget to provide an acknowlegement!</p> <p>The continued growth and support of NIH's Biowulf cluster is dependent upon its demonstrable value to the NIH Intramural Research Program. If you publish research that involved significant use of Biowulf, please cite the cluster.</p> <p>Suggested citation text:</p> <pre><code>This work utilized the computational resources of the NIH HPC Biowulf cluster. (http://hpc.nih.gov)\n</code></pre>"},{"location":"RNA-seq/Resources/#4-references","title":"4. References","text":"<p><sup>1. Harrow, J., et al., GENCODE: the reference human genome annotation for The ENCODE Project. Genome Res, 2012. 22(9): p. 1760-74.</sup> <sup>2. Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data.</sup> <sup>3. Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12.</sup> <sup>4. Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46.</sup> <sup>5. Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385.</sup> <sup>6. Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338.</sup> <sup>7. Dobin, A., et al., STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 2013. 29(1): p. 15-21.</sup> <sup>8. Bushnell, B., Rood, J., &amp; Singer, E. (2017). BBMerge - Accurate paired shotgun read merging via overlap. PloS one, 12(10), e0185056.</sup> <sup>9. Okonechnikov, K., et al. (2015). \"Qualimap 2: advanced multi-sample quality control for high-throughput sequencing data.\" Bioinformatics 32(2): 292-294.</sup> <sup>10. The Picard toolkit. https://broadinstitute.github.io/picard/.</sup> <sup>11. Daley, T. and A.D. Smith, Predicting the molecular complexity of sequencing libraries. Nat Methods, 2013. 10(4): p. 325-7.</sup> <sup>12. Li, H., et al. (2009). \"The Sequence Alignment/Map format and SAMtools.\" Bioinformatics 25(16): 2078-2079.</sup> <sup>13. Wang, L., et al. (2012). \"RSeQC: quality control of RNA-seq experiments.\" Bioinformatics 28(16): 2184-2185.</sup> <sup>14. Li, B. and C.N. Dewey, RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics, 2011. 12: p. 323.</sup> <sup>15. Uhrig, S., et al. (2021). \"Accurate and efficient detection of gene fusions from RNA sequencing data\". Genome Res. 31(3): 448-460.</sup> <sup>16. Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048.</sup></p>"},{"location":"RNA-seq/TLDR-RNA-seq/","title":"Getting started","text":""},{"location":"RNA-seq/TLDR-RNA-seq/#1-introduction","title":"1. Introduction","text":"<p>When processing RNA-sequencing data, there are often many steps that we must repeat. These are usually steps like removing adapter sequences, aligning reads against a reference genome, checking the quality of the data, and quantifying counts. RENEE is composed of several sub commands or convenience functions to automate these repetitive steps.</p> <p>With RENEE, you can run your samples through our highly-reproducible pipeline, build resources for new reference genomes, and more!</p> <p>Here is a list of available renee <code>sub commands</code>:</p> <ul> <li><code>run</code>: run the rna-seq pipeline</li> <li><code>build</code>: build reference files</li> <li><code>cache</code>: cache remote resources locally</li> <li><code>unlock</code>: unlock a working directory</li> </ul> <p>This page contains information for building reference files and running the RENEE pipeline. For more information about each of the available sub commands, please see the usage section.</p>"},{"location":"RNA-seq/TLDR-RNA-seq/#2-setup-renee","title":"2. Setup RENEE","text":"<p>Estimated Reading Time: 3 Mintutes</p> <p>RENEE has two dependencies: <code>singularity</code> and <code>snakemake</code>. These dependencies can be installed by a sysadmin; however, snakemake is readily available through conda. Before running the pipeline or any of the commands below, please ensure singularity and snakemake are in your <code>$PATH</code>. Please see follow the instructions below for getting started with the RENEE pipeline.</p>"},{"location":"RNA-seq/TLDR-RNA-seq/#21-login-to-cluster","title":"2.1 Login to cluster","text":"<pre><code># Setup Step 0.) ssh into cluster's head node\n# example below for Biowulf cluster\nssh -Y $USER@biowulf.nih.gov\n</code></pre>"},{"location":"RNA-seq/TLDR-RNA-seq/#22-grab-an-interactive-node","title":"2.2 Grab an interactive node","text":"<pre><code># Setup Step 1.) Please do not run RENEE on the head node!\n# Grab an interactive node first\nsrun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\n</code></pre>"},{"location":"RNA-seq/TLDR-RNA-seq/#23-load-dependencies","title":"2.3 Load dependencies","text":"<pre><code># Setup Step 2.) Add singularity and snakemake executables to $PATH\nmodule purge\nmodule load ccbrpipeliner\n</code></pre>"},{"location":"RNA-seq/TLDR-RNA-seq/#3-building-reference-files","title":"3. Building Reference files","text":"<p>In this example, we will start off by building reference files downloaded from GENCODE. We recommend downloading the <code>PRI</code> Genome FASTA file and annotation from GENCODE. These <code>PRI</code> reference files contain the primary chromosomes and scaffolds. We do not recommend downloading the <code>CHR</code> reference files!</p> <p>Checkout this list for currently available resources on Biowulf. If your required genome + annotation combination is NOT available, only then proceed to building your own reference files. Also, if you think that your genome + annotation combination may be beneficial for other Biowulf users of RENEE as well, then please request it to be added to RENEE's default resources by opening an issue on Github.</p>"},{"location":"RNA-seq/TLDR-RNA-seq/#31-download-references-from-gencode","title":"3.1 Download References from GENCODE","text":"<pre><code># Build Step 0.) Please do not run RENEE on the head node!\n# Grab an interactive node first\n# Assumes that you have already ssh-ed into cluster\nsrun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\n\n# Build Step 1.) Download the PRI Genome FASTA file for GRCh38.p13\nwget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_36/GRCh38.primary_assembly.genome.fa.gz\ngzip -d GRCh38.primary_assembly.genome.fa.gz\n\n# Build Step 2.) Download the PRI release 36 annotation\nwget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_36/gencode.v36.primary_assembly.annotation.gtf.gz\ngzip -d gencode.v36.primary_assembly.annotation.gtf.gz\n</code></pre>"},{"location":"RNA-seq/TLDR-RNA-seq/#32-run-build-pipeline","title":"3.2 Run Build pipeline","text":"<pre><code># Build Step 3.) Load dependencies\nmodule purge\nmodule load ccbrpipeliner\n\n# Build Step 4.) Dry-run the build pipeline\nrenee build  --ref-fa GRCh38.primary_assembly.genome.fa \\\n                --ref-name hg38 \\\n                --ref-gtf gencode.v36.primary_assembly.annotation.gtf \\\n                --gtf-ver 36 --output /data/$USER/hg38_36 --dry-run\n\n\n# Build Step 5.) Submit the build pipeline to cluster\nrenee build  --ref-fa GRCh38.primary_assembly.genome.fa \\\n                --ref-name hg38 \\\n                --ref-gtf gencode.v36.primary_assembly.annotation.gtf \\\n                --gtf-ver 36 --output /data/$USER/hg38_36\n</code></pre> <p>An email notification will be sent out when the pipeline starts and ends. Once the build pipeline completes, you can run RENEE with the provided test dataset. Please see the instructions below for more information.</p>"},{"location":"RNA-seq/TLDR-RNA-seq/#4-running-renee","title":"4. Running RENEE","text":"<p>Run RENEE with the reference files we built above using hg38 (GRCh38.p13) Genome FASTA file and GENCODE release 36 annotation (GTF). For more information about how the reference files we generated, please see the instructions above. You can use those instructions as a guide for building any new reference genomes in the future.</p>"},{"location":"RNA-seq/TLDR-RNA-seq/#41-dry-run-pipeline","title":"4.1 Dry-run pipeline","text":"<p>Dry-run the pipeline prior to submitting the pipeline's master job. Please note that if you wish to run RENEE with a new dataset, you will only need to update the values provided to the <code>--input</code> and <code>--output</code> arguments (and maybe <code>--genome</code>). The <code>--input</code> argument supports globbing. If this is the first time running RENEE with for given dataset, the <code>--output</code> directory should not exist on your local filesystem. It will be created automatically during runtime.</p> <pre><code># Run Step 0.) Please do not run RENEE on the head node!\n# Grab an interactive node first\n# Assumes that you have already ssh-ed into cluster\nsrun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\n\n# Run Step 1.) Load dependencies\nmodule purge\nmodule load ccbrpipeliner\n\n# Run Step 2.) Dry-run the pipeline with test dataset\n# And reference genome generated in the steps above\n# Test data consists of sub sampled FastQ files\nrenee run \\\n    --input ${RENEE_HOME}/.tests/*.R?.fastq.gz \\\n    --output /data/${USER}/runner_hg38_36/  \\\n    --genome /data/${USER}/hg38_36/hg38_36.json  \\\n    --mode slurm \\\n    --star-2-pass-basic \\\n    --dry-run\n</code></pre>"},{"location":"RNA-seq/TLDR-RNA-seq/#42-run-pipeline","title":"4.2 Run pipeline","text":"<p>Kick off the pipeline by submitting the master job to the cluster. It is essentially the same command above without the <code>--dry-run</code> flag.</p> <pre><code># Run Step 3.) Submit the master job\n# Runs the RENEE pipeline  with the\n# reference genome generated in the steps above\n# and with the test dataset\nrenee run \\\n    --input ${RENEE_HOME}/.tests/*.R?.fastq.gz \\\n    --output /data/${USER}/runner_hg38_36/  \\\n    --genome /data/${USER}/hg38_36/hg38_36.json  \\\n    --mode slurm \\\n    --star-2-pass-basic \\\n    --dry-run\n</code></pre> <p>An email notification will be sent out when the pipeline starts and ends.</p>"},{"location":"RNA-seq/Theory/","title":"Theory","text":""},{"location":"RNA-seq/Theory/#1-introduction","title":"1. Introduction","text":"<p>RNA-sequencing (RNA-seq) has a wide variety of applications; this transcriptome profiling method can be used to quantify gene and isoform expression, find changes in alternative splicing, detect gene-fusion events, call variants and much more.</p> <p>It is also worth noting that RNA-seq can be coupled with other biochemical assays to analyze many other aspects of RNA biology, such as RNA\u2013protein binding (CLIP-seq, RIP-seq), RNA structure (SHAPE-seq), or RNA\u2013RNA interactions (CLASH-seq). These applications are, however, beyond the scope of this documentation as we focus on typical RNA-seq project (i.e. quantifying expression and gene fusions). Our focus is to outline current standards and resources for the bioinformatics analysis of RNA-seq data. We do not aim to provide an exhaustive compilation of resources or software tools. Rather, we aim to provide a guideline and conceptual overview for RNA-seq data analysis based on our best-practices RNA-seq pipeline.</p> <p>Here we review all of the typical major steps in RNA-seq data analysis, starting from experimental design, quality control, read alignment, quantification of gene and transcript levels, and visualization.</p>"},{"location":"RNA-seq/Theory/#2-experimental-design","title":"2. Experimental Design","text":"<p>Just like any other scientific experiment, a good RNA-seq experiment is hypothesis-driven. If you cannot describe the problem you are trying to address, throwing NGS at the problem is not a cure-all solution. Fishing for results is a waste of your time and is bad science. As so, designing a well-thought-out experiment around a testable question will maximize the likelihood of generating high-impact results.</p> <p>The data that is generated will determine whether you have the potential to answer your biological question of interest. As a prerequisite, you need to think about how you will construct your libraries; the correct sequencing depth to address your question of interest; the number of replicates, and strategies to reduce/mitigate batch effects.</p>"},{"location":"RNA-seq/Theory/#21-library-construction","title":"2.1 Library construction","text":"<p>rRNA can comprise up to 80% of the RNA in a cell. An important consideration is the RNA extraction protocol that will be used to remove the highly abundant ribosomal RNA (rRNA). For eukaryotic cells, there are two major considerations: choosing whether to enrich for mRNA or whether to deplete rRNA.</p>"},{"location":"RNA-seq/Theory/#211-mrna","title":"2.1.1 mRNA","text":"<p>Poly-(A) selection is a common method used to enrich for mRNA. This method generates the highest percentage of reads which will ultimately map to protein-coding genes-- making it a common choice for most applications. That being said, poly(A)-selection requires your RNA to be of high quality with minimal degradation. Degraded samples that are followed with ploy(A)-selection may result in a 3\u2019 bias, which in effect, may introduce downstream biases into your results.</p>"},{"location":"RNA-seq/Theory/#212-total-rna","title":"2.1.2 total RNA","text":"<p>The second method captures total RNA through the depletion of rRNA. This method allows you to examine both mRNA and other non-coding RNA species such as lncRNAs. Again, depending on the question you are trying to answer this may be the right method for you. Although, it should be noted that both methods, mRNA and total RNA, require RINs (&gt;8). But if you samples do contain slightly degraded RNA, you might be able to use the total RNA method over poly(A)-selection.</p>"},{"location":"RNA-seq/Theory/#22-sequencing-depth","title":"2.2 Sequencing Depth","text":"<p>Sequencing depth or library size is another important design factor. As sequencing depth is increased, more transcripts will be detected (up until a saturation point), and their relative abundance will be quantified more accurately.</p> <p>At the end of the day, the targeted sequencing depth depends on the aims of the experiment. Are you trying to quantify differences in gene expression, are you trying to quantify differential isoform usage or alternative splicing events? The numbers quoted below are more or less tailored to quantify differences in gene expression. If you are trying to quantify changes in alternative splicing or isoform regulation, you are going to much higher coverage (~ 100M paired-end reads).</p>"},{"location":"RNA-seq/Theory/#221-mrna","title":"2.2.1 mRNA","text":"<p>For mRNA libraries or libraries generated from a prep kit using poly-(A) selection, we recommend a minimum sequencing depth of 10-20M paired-end reads (or 20-40M reads). RNA must be of high quality or a 3' bias may be observed.</p>"},{"location":"RNA-seq/Theory/#222-total-rna","title":"2.2.2 total RNA","text":"<p>For total RNA libraries, we recommend a sequencing depth of 25-60M paired-end reads (or 50-120M reads). RNA must be of high quality.</p> <p>Note: In the sections above and below, when I say to paired-end reads I am referring to read pairs generated from paired-end sequencing of a given cDNA fragment. You will sometimes see reads reported as pairs of reads or total reads.</p>"},{"location":"RNA-seq/Theory/#23-replicates","title":"2.3 Replicates","text":"<p>Another important design factor is the number of replicates. That being said, biological replicates are always preferred over technical replicates.</p>"},{"location":"RNA-seq/Theory/#231-recommendation","title":"2.3.1 Recommendation","text":"<p>We recommend 4 biological replicates per experimental condition or group. Having more replicates is good for several reasons because in the real world problems arise. If you have a bad sample that cannot be used due to severe QC issues, you are still left with 3 biological replicates. This allows you to drop a bad sample without comprising statistical power downstream.</p>"},{"location":"RNA-seq/Theory/#232-bare-minimum","title":"2.3.2 Bare Minimum","text":"<p>If cost is a factor, at a minimum, 3 biological replicates will ensure good statistical power for downstream analysis.</p>"},{"location":"RNA-seq/Theory/#24-reducing-batch-effects","title":"2.4 Reducing Batch Effects","text":"<p>Batch effects represent unwanted sources of technical variation. Batch effects introduce non-biological variation into your data, which if not accounted for can influence the results. Through the process of library preparation to sequencing, there are a number of steps (such as RNA extraction to adapter ligation to lane loading, etc.) that might introduce biases into the resulting data.</p> <p>As a general rule of thumb, the best way to reduce the introduction of batch effects is through uniform processing-- meaning you need to ensure that differences in sample handling are minimal. This means that samples should be processed by the same lab technician and everything should be done in a uniform manner. That being said, do not extract your RNA at different times, do not use different lots of reagents! If a large number of samples are being processed and everything cannot be done at the same time, process representative samples from each biological group at the same time. This will ensure that batches and your variable of interest do not become confounded. Also, keep note of which samples belong to each batch. This information will be needed for batch correction.</p> <p>To reduce the possibility of introducing batch effects from sequencing, all samples should be multiplexed together on the same lane(s).</p> Sample Group Batch Batch* Treatment_rep_1 KO 1 1 Treatment_rep_2 KO 2 1 Treatment_rep_3 KO 1 1 Treatment_rep_4 KO 2 1 Control_rep_1 WT 1 2 Control_rep_2 WT 2 2 Control_rep_3 WT 1 2 Control_rep_4 WT 2 2 <p>Batch = properly balanced batches, easily corrected  Batch* = groups and batch totally confounded, cannot be corrected </p> <p>That being said, some problems cannot be bioinformatically corrected. If your variable of interest is totally confounded with your batches, applying batch correction to fix the problem is not going to work, and will lead to undesired results (i.e. <code>Batch*</code> column). If batches must be introduced due to other constraining factors, please keep note which samples belong to each batch, and please put some thought into how to properly balance samples across your batches.</p>"},{"location":"RNA-seq/Theory/#3-quality-control","title":"3. Quality Control","text":"<p>Quality-control (QC) is extremely important! As the old adage goes: Garbage in, Garbage out! If there is one thing that to take away from this document, let it be that. Performing QC checks will help ensure that your results are reliable and reproducible.</p> <p>It is worth noting that there is a large variety of open-source tools that can be used to assess the quality of your data so there is no reason to re-invent the wheel. Please keep this in mind but also be aware that there are many wheels per se, and you will need to know which to use and when. In this next section, we will cover different quality-control checks that can be applied at different stages of your RNA-seq analysis. These recommendations are based on a few tools our best-practices RNA-seq pipeline employs.</p>"},{"location":"RNA-seq/Theory/#31-pre-aligment","title":"3.1 Pre-aligment","text":"<p>Before drawing biological conclusions, it is important to perform quality control checks to ensure that there are no signs of sequencing error, biases in your data, or other sources of contamination. Modern high-throughput sequencers generate millions of reads per run, and in the real world, problems can arise.</p> <p>The general idea is to assess the quality of your reads before and after adapter removal and to check for different sources of contamination before proceeding to alignment. Here are a few of the tools that we use and recommend.</p>"},{"location":"RNA-seq/Theory/#311-sequencing-quality","title":"3.1.1 Sequencing Quality","text":"<p>To assess the sequencing quality of your data, we recommend running FastQC before and after adapter trimming. FastQC generates a set of basic statistics to identify problems that can arise during sequencing or library preparation. FastQC will summarize per base and per read QC metrics such as quality scores and GC content (ideally, this plot should have a normal distribution with no forms of bimodality). It will also summarize the distribution of sequence lengths and will report the presence of adapter sequences, which is one reason we run it after removing adapters.</p>"},{"location":"RNA-seq/Theory/#312-contamination-screening","title":"3.1.2 Contamination Screening","text":"<p>During the process of sample collection to library preparation, there is a risk for introducing wanted sources of DNA. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. If your data has high levels of human, mouse, fungi, or bacterial contamination, FastQ Screen will tell you. FastQ Screen will tell you what percentage of your library aligns against different reference genomes.</p> <p>If there are high levels of microbial contamination, Kraken will provide an estimation of the taxonomic composition. Kraken can be used in conjunction with Krona to produce interactive reports.</p> <p>Note: Due to high levels of homology between organisms, there may be a small portion of your reads that align to an unexpected reference genome. Again, this should be a minimal percentage of your reads.</p>"},{"location":"RNA-seq/Theory/#32-post-alignment","title":"3.2 Post-alignment","text":"<p>Again, there are many tools available to assess the quality of your data post-alignment, and as stated before, there is no need to re-invent the wheel. Please see the table below for a generalized set of guidelines for different pre/post QC metrics.</p>"},{"location":"RNA-seq/Theory/#321-library-complexity","title":"3.2.1 Library Complexity","text":"<p>Preseq can be used to estimate the complexity of a library for each of your samples. If the duplication rate is very high, the overall library complexity will be low. Low library complexity could signal an issue with library preparation or sample preparation (FFPE samples) where very little input RNA was over-amplified or the sample may be degraded.</p>"},{"location":"RNA-seq/Theory/#322-library-composition","title":"3.2.2 Library Composition","text":"<p>Picard has a particularly useful sub-command called CollectRNAseqMetrics which reports the number and percentage of reads that align to various regions: such as coding, intronic, UTR, intergenic and ribosomal regions. This is particularly useful as you would expect a library constructed with ploy(A)-selection to have a high percentage of reads that map to coding regions. Picard CollectRNAseqMetrics will also report the uniformity of coverage across all genes, which is useful for determining whether a sample has a 3' bias (observed in libraries containing degraded RNA).</p>"},{"location":"RNA-seq/Theory/#323-rna-quality","title":"3.2.3 RNA Quality","text":"<p>This is another particularity useful package that is tailored for RNA-seq data. The package is made up of over 20 sub-module that can be used to do things like calculate the average insert size between paired-end reads (which is useful for GEO upload), annotate the percentage of reads spanning known or novel splice junctions, convert a BAM file into a normalized BigWig file, and infer RNA quality.</p>"},{"location":"RNA-seq/Theory/#33-guidelines","title":"3.3 Guidelines","text":"<p>Here is a set of generalized guidelines for different QC metrics. Some of these metrics will vary genome-to-genome depending on the quality of the assembly and annotation but that has been taken into consideration for our set of supported reference genomes.</p> QC Metric Guidelines mRNA total RNA RNA Type(s) Coding Coding + non-coding RIN &gt;= 8 [low RIN ~ 3' bias] &gt;= 8 Single-end vs Paired-end Paired-end Paired-end Sequencing Depth 10-20M PE reads 25-60M PE reads FastQC Q30 &gt; 70% Q30 &gt; 70% Percent Aligned to Reference &gt; 70% &gt; 65% Million Reads Aligned Reference &gt; 7M PE reads &gt; 16.5M PE reads Percent Aligned to rRNA &lt; 5% &lt; 15% Picard RNAseqMetrics Coding &gt; 50% Coding &gt; 35% Picard RNAseqMetrics Intronic + Intergenic &lt; 25% Intronic + Intergenic &lt; 40% RSeQC TIN medTIN &gt; 65 medTIN &gt; 60 <p>The median TIN value reported by RSeQC works reasonably well for quickly identifying problematic samples.</p>"},{"location":"RNA-seq/Theory/#4-data-processing","title":"4. Data Processing","text":"<p>Starting from raw data (FastQ files), how do we get a raw counts matrix, or how do we get a list of differential expressed genes? Before feeding your data into an R package for differential expression analysis, it needs to be processed to add biological context to it. In this section, we will talk about the data processing pipeline in more detail-- more specifically focusing on primary and secondary analysis.</p>"},{"location":"RNA-seq/Theory/#41-primary-analysis","title":"4.1 Primary Analysis","text":"<p>Raw data &gt; Adapter Trimming &gt; Alignment &gt; Quantification</p>"},{"location":"RNA-seq/Theory/#411-adapter-trimming","title":"4.1.1 Adapter Trimming","text":"<p>One of the first steps in this process is to remove any unwanted adapters sequences from your reads in before alignment. Adapters are composed of synthetic sequences and should be removed prior to alignment. Adapter removal is especially important in certain protocols, such as miRNA-seq. When smaller fragments are sequenced it is almost certain there will be some form of adapter contamination.</p>"},{"location":"RNA-seq/Theory/#412-alignment","title":"4.1.2 Alignment","text":"<p>In the alignment step, we add biological context to the raw data. In this step, we align reads to the reference genome to find where the sequenced fragments originate.</p> <p>Accurate alignment of the cDNA fragments (which are derived from RNA) is difficult. Alternative splicing introduces the problem of aligning to non-contiguous regions, and using traditional genomic alignment algorithms can produce inaccurate or low-quality alignments due to the combination of alternative splicing and genomic variation (substitutions, insertions, and deletions). This has lead to the development of splice-aware aligners like STAR, which are designed to overcome these issues. STAR can also be run in a two-pass mode for enhanced detection of reads mapping to novel splice junctions.</p>"},{"location":"RNA-seq/Theory/#413-quantification","title":"4.1.3 Quantification","text":"<p>In the quantification step, the number of reads that mapped to a particular genomic feature (such as a gene or isoform) is counted. It is important to keep in mind that raw counts are biased by a number of factors such as library size, feature-length, and other compositional biases. As so, it is important to normalize your data to remove these biases before summarizing differences between groups of samples.</p>"},{"location":"RNA-seq/build/","title":"<code>renee build</code>","text":""},{"location":"RNA-seq/build/#1-about","title":"1. About","text":"<p>The <code>renee</code> executable is composed of several inter-related sub commands. Please see <code>renee -h</code> for all available options.</p> <p>This part of the documentation describes options and concepts for <code>renee build</code> sub command in more detail. With minimal configuration, the <code>build</code> sub command enables you to build new reference files for the renee run pipeline.</p> <p>Setting up the RENEE build pipeline is fast and easy! In its most basic form, <code>renee build</code> only has five required inputs.</p>"},{"location":"RNA-seq/build/#2-synopsis","title":"2. Synopsis","text":"<pre><code>$ renee build [--help] \\\n             [--shared-resources SHARED_RESOURCES] [--small-genome] \\\n             [--dry-run] [--singularity-cache SINGULARITY_CACHE] \\\n             [--sif-cache SIF_CACHE] [--tmp-dir TMP_DIR] \\\n             --ref-fa REF_FA \\\n             --ref-name REF_NAME \\\n             --ref-gtf REF_GTF \\\n             --gtf-ver GTF_VER \\\n             --output OUTPUT\n</code></pre> <p>The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets.</p> <p>A user must provide the genomic sequence of the reference's assembly in FASTA format via <code>--ref-fa</code> argument, an alias for the reference genome via <code>--ref-name</code> argument, a gene annotation for the reference assembly via <code>--ref-gtf</code> argument, an alias or version for the gene annotation via the <code>--gtf-ver</code> argument, and an output directory to store the built reference files via <code>--output</code> argument. If you are running the pipeline outside of Biowulf, you will need to additionally provide the the following options: <code>--shared-resources</code>, <code>--tmp-dir</code>. More information about each of these options can be found below.</p> <p>For human and mouse data, we highly recommend downloading the latest available PRI genome assembly and corresponding gene annotation from GENCODE. These reference files contain chromosomes and scaffolds sequences.</p> <p>The build pipeline will generate a JSON file containing key, value pairs to required reference files for the <code>renee run</code> pipeline. This file will be located in the path provided to <code>--output</code>. The name of this JSON file is dependent on the values provided to <code>--ref-name</code> and <code>--gtf-ver</code> and has the following naming convention: <code>{OUTPUT}/{REF_NAME}_{GTF_VER}.json</code>. Once the build pipeline completes, this reference JSON file can be passed to the <code>--genome</code> option of <code>renee run</code>. This is how new references are built for the RENEE pipeline.</p> <p>Use you can always use the <code>-h</code> option for information on a specific command.</p>"},{"location":"RNA-seq/build/#21-required-arguments","title":"2.1 Required Arguments","text":"<p>Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code.</p> <p><code>--ref-fa REF_FA</code></p> <p>Genomic FASTA file of the reference genome. type: file</p> <p>This file represents the genome sequence of the reference assembly in FASTA format. If you are downloading this from GENCODE, you should select the PRI genomic FASTA file. This file will contain the primary genomic assembly (contains chromosomes and scaffolds). This input file should not be compressed. Sequence identifiers in this file must match with sequence identifiers in the GTF file provided to <code>--ref-gtf</code>.</p> <p>Example: &gt; <code>--ref-fa GRCh38.primary_assembly.genome.fa</code></p> <p><code>--ref-name REF_NAME</code></p> <p>Name of the reference genome. type: string</p> <p>Name or alias for the reference genome. This can be the common name for the reference genome. Here is a list of common examples for different model organisms: mm10, hg38, rn6, danRer11, dm6, canFam3, sacCer3, ce11. If the provided values contains one of the following sub-strings (hg19, hs37d, grch37, hg38, hs38d, grch38, mm10, grcm38), then Arriba will run with its corresponding blacklist.</p> <p>Example: <code>--ref-name hg38</code></p> <p><code>--ref-gtf REF_GTF</code></p> <p>Gene annotation or GTF file for the reference genome. type: file</p> <p>This file represents the reference genome's gene annotation in GTF format. If you are downloading this from GENCODE, you should select the 'PRI' GTF file. This file contains gene annotations for the primary assembly (contains chromosomes and scaffolds). This input file should not be compressed. Sequence identifiers (column 1) in this file must match with sequence identifiers in the FASTA file provided to <code>--ref-fa</code>. Example: <code>--ref-gtf gencode.v36.primary_assembly.annotation.gtf</code></p> <p><code>--gtf-ver GTF_VER</code></p> <p>Version of the gene annotation or GTF file provided. type: string or int</p> <p>This is the version of the supplied gene annotation or GTF file. If you are using a GTF file from GENCODE, use the release number or version (i.e. M25 for mouse or 37 for human). Visit gencodegenes.org for more details. Example: <code>--gtf-ver 36</code></p> <p><code>--output OUTPUT</code></p> <p>Path to an output directory. type: path</p> <p>This location is where the build pipeline will create all of its output files. If the user-provided working directory has not been initialized, it will automatically be created. Note: by default, any files in <code>config</code>, <code>resources,</code> or <code>workflow</code> in the output directory may be overwritten by <code>renee build</code>. Example: <code>--output /data/$USER/refs/hg38_36/</code></p>"},{"location":"RNA-seq/build/#22-build-options","title":"2.2 Build Options","text":"<p>Each of the following arguments are optional and do not need to be provided. If you are running the pipeline outside of Biowulf, the <code>--shared-resources</code> option only needs to be provided at least once. This will ensure reference files that are shared across different genomes are downloaded locally.</p> <p><code>--shared-resources SHARED_RESOURCES</code></p> <p>Local path to shared resources. type: path</p> <p>The pipeline uses a set of shared reference files that can be re-used across reference genomes. These currently include reference files for kraken and FQScreen. These reference files can be downloaded with the build sub command's <code>--shared-resources</code> option. With that being said, these files only need to be downloaded once. We recommend storing this files in a shared location on the filesystem that other people can access. If you are running the pipeline on Biowulf, you do NOT need to download these reference files! They already exist on the filesystem in a location that anyone can access; however, if you are running the pipeline on another cluster or target system, you will need to download the shared resources with the build sub command, and you will need to provide this option every time you run the pipeline. Please provide the same path that was provided to the build sub command's --shared-resources option. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. For more information about how to download shared resources, please reference the build sub command's <code>--shared-resources</code> option.</p> <p>Example: <code>--shared-resources /data/shared/renee</code></p> <p><code>--small-genome</code></p> <p>Builds a small genome index. type: boolean</p> <p>For small genomes, it is recommended running STAR with a scaled down <code>--genomeSAindexNbases</code> value. This option runs the build pipeline in a mode where it dynamically finds the optimal value for this option using the following formula: <code>min(14, log2(GenomeSize)/2 - 1)</code>. Generally speaking, this option is not really applicable for most mammalian reference genomes, i.e. human and mouse; however, researcher working with very small reference genomes, like S. cerevisiae ~ 12Mb, should provide this option.</p> <p>When in doubt feel free to provide this option, as the optimal value will be found based on your input.</p> <p>Example: <code>--small-genome</code></p>"},{"location":"RNA-seq/build/#23-orchestration-options","title":"2.3 Orchestration Options","text":"<p><code>--dry-run</code></p> <p>Dry run the build pipeline. type: boolean</p> <p>Displays what steps in the build pipeline remain or will be run. Does not execute anything!</p> <p>Example: <code>--dry-run</code></p> <p><code>--singularity-cache SINGULARITY_CACHE</code></p> <p>Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: <code>--output OUTPUT/.singularity</code></p> <p>Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the <code>--output</code> argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the <code>--sif-cache</code> option to create a shareable resource.</p> <p>Example: <code>--singularity-cache /data/$USER/.singularity</code></p> <p><code>--sif-cache SIF_CACHE</code></p> <p>Path where a local cache of SIFs are stored. type: path</p> <p>Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The <code>renee cache</code> subcommand can be used to create a local SIF cache. Please see <code>renee cache</code> for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running RENEE with this option when ever possible.</p> <p>Example: <code>--singularity-cache /data/$USER/SIFs</code></p> <p><code>--tmp-dir TMP_DIR</code></p> <p>Path on the file system for writing temporary files. type: path default: <code>/lscratch/$SLURM_JOBID</code></p> <p>Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' on NIH's Biowulf cluster and 'OUTPUT' on the FRCE cluster. However, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject avariable into this string that should NOT be expanded,please quote this options value in single quotes.</p> <p>Example: <code>--tmp-dir /cluster_scratch/$USER/</code></p>"},{"location":"RNA-seq/build/#24-misc-options","title":"2.4 Misc Options","text":"<p>Each of the following arguments are optional and do not need to be provided.</p> <p><code>-h, --help</code></p> <p>Display Help. type: boolean</p> <p>Shows command's synopsis, help message, and an example command</p> <p>Example: <code>--help</code></p>"},{"location":"RNA-seq/build/#3-hybrid-genomes","title":"3. Hybrid Genomes","text":"<p>If you have two GTF files, e.g. hybrid genomes (host + virus), then you need to create one genomic FASTA file and one GTF file for the hybrid genome prior to running the <code>renee build</code> command.</p> <p>We recommend creating an artificial chromosome for the non-host sequence. The sequence identifier in the FASTA file must match the sequence identifier in the GTF file (column 1). Generally speaking, since the host annotation is usually downloaded from Ensembl or GENCODE, it will be correctly formatted; however, that may not be the case for the non-host sequence!</p> <p>Please ensure the non-host annotation contains the following features and/or constraints:</p> <ul> <li>for a given <code>gene</code> feature</li> <li>each <code>gene</code> entry has at least one <code>transcript</code> feature</li> <li>and each <code>transcript</code> entry has at least one <code>exon</code> feature</li> <li><code>gene_id</code>, <code>gene_name</code> and <code>gene_biotype</code> are required</li> <li>for a given <code>transcipt</code> feature</li> <li>along with <code>gene_id</code>, <code>gene_name</code> and <code>gene_biotype</code> ... <code>transcript_id</code> is also required</li> <li>for a given <code>exon</code> feature</li> <li><code>gene_id</code>, <code>gene_name</code>, <code>gene_biotype</code>, <code>transcript_id</code> are required</li> </ul> <p>If not, the GTF file may need to be manually curated until these conditions are satisfied.</p> <p>Here is an example feature from a hand-curated Biotyn_probe GTF file:</p> <pre><code>Biot1   BiotynProbe gene    1   21  0.000000    +   .   gene_id \"Biot1\"; gene_name \"Biot1\"; gene_biotype \"biotynlated_probe_control\";\nBiot1   BiotynProbe transcript  1   21  0.000000    +   .   gene_id \"Biot1\"; gene_name \"Biot1\"; gene_biotype \"biotynlated_probe_control\"; transcript_id \"Biot1\"; transcript_name \"Biot1\"; transcript_type \"biotynlated_probe_control\";\nBiot1   BiotynProbe exon    1   21  0.000000    +   .   gene_id \"Biot1\"; gene_biotype \"biotynlated_probe_control\"; transcript_id \"Biot1\"; transcript_type \"biotynlated_probe_control\";\n</code></pre> <p>In this tab-delimited example above,</p> <ul> <li>line 1: the <code>gene</code> feature has 3 required attributes in column 9: <code>gene_id</code> and <code>gene_name</code> and <code>gene_biotype</code></li> <li>line 2: the <code>transcript</code> entry for the above <code>gene</code> repeats the same attributes with following required fields: <code>transcript_id</code> and <code>transcript_name</code></li> <li>Please note: <code>transcript_type</code> is optional</li> <li>line 3: the <code>exon</code> entry for the above <code>transcript</code> has 3 required attributes: <code>gene_id</code> and <code>transcript_id</code> and <code>gene_biotype</code></li> <li>Please note: <code>transcript_type</code> is optional</li> </ul> <p>For a given gene, the combination of the <code>gene_id</code> AND <code>gene_name</code> should form a unique string. There should be no instances where two different genes share the same <code>gene_id</code> AND <code>gene_name</code>.</p>"},{"location":"RNA-seq/build/#4-convert-ncbi-gff3-to-gtf-format","title":"4. Convert NCBI GFF3 to GTF format","text":"<p>It is worth noting that RENEE comes bundled with a script to convert GFF3 files downloaded from NCBI to GTF file format. This convenience script is useful as the <code>renee build</code> sub command takes a GTF file as one of its inputs.</p> <p>Please note that this script has only been tested with GFF3 files downloaded from NCBI, and it is not recommended to use with GFF3 files originating from other sources like Ensembl or GENCODE. If you are selecting an annotation from Ensembl or GENCODE, please download the GTF file option.</p> <p>The only dependency of the script is the python package argparse, which comes bundled with the following python\u2154 distributions: <code>python&gt;=2.7.18</code> or <code>python&gt;=3.2</code>. If argparse is not installed, it can be downloaded with pip by running the following command:</p> <pre><code>pip install --upgrade pip\npip install argparse\n</code></pre> <p>For more information about the script and its usage, please run:</p> <pre><code>./resources/gff3togtf.py -h\n</code></pre>"},{"location":"RNA-seq/build/#5-example","title":"5. Example","text":""},{"location":"RNA-seq/build/#51-biowulf","title":"5.1 Biowulf","text":"<p>On Biowulf getting started with the pipeline is fast and easy! In this example, we build a mouse reference genome.</p> <pre><code># Step 0.) Grab an interactive node (do not run on head node)\nsrun -N 1 -n 1 --time=2:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\nmodule purge\nmodule load ccbrpipeliner\n\n# Step 1.) Dry run the Build pipeline\nrenee build --ref-fa GRCm39.primary_assembly.genome.fa \\\n              --ref-name mm39 \\\n              --ref-gtf gencode.vM26.annotation.gtf \\\n              --gtf-ver M26 \\\n              --output /data/$USER/refs/mm39_M26 \\\n              --sif-cache /data/CCBR_Pipeliner/SIFs/ \\\n              --dry-run\n\n# Step 2.) Build new RENEE reference files\nrenee build --ref-fa GRCm39.primary_assembly.genome.fa \\\n              --ref-name mm39 \\\n              --ref-gtf gencode.vM26.annotation.gtf \\\n              --gtf-ver M26 \\\n              --output /data/$USER/refs/mm39_M26 \\\n              --sif-cache /data/CCBR_Pipeliner/SIFs/\n</code></pre>"},{"location":"RNA-seq/build/#52-generic-slurm-cluster","title":"5.2 Generic SLURM Cluster","text":"<p>Running the pipeline outside of Biowulf is easy; however, there are a few extra options you must provide. Please note when running the build sub command for the first time, you will also need to provide the <code>--shared-resources</code> option. This option will download our kraken2 database and bowtie2 indices for FastQ Screen. The path provided to this option should be provided to the <code>--shared-resources</code> option of the run sub command. Next, you will also need to provide a path to write temporary output files via the <code>--tmp-dir</code> option. We also recommend providing a path to a SIF cache. You can cache software containers locally with the cache sub command.</p> <pre><code># Step 0.) Grab an interactive node (do not run on head node)\nsrun -N 1 -n 1 --time=2:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\n# Add snakemake and singularity to $PATH,\n# This step may vary across clusters, you\n# can reach out to a sys admin if snakemake\n# and singularity are not installed.\nmodule purge\n# Replace the following:\n# module load ccbrpipeliner\n# with module load statements that load\n# python &gt;= 3.7,\n# snakemake, and\n# singularity\n# before running renee\n# Also, ensure that the `renee` executable is in PATH\n\n# Step 1.) Dry run the Build pipeline\nrenee build --ref-fa GRCm39.primary_assembly.genome.fa \\\n              --ref-name mm39 \\\n              --ref-gtf gencode.vM26.annotation.gtf \\\n              --gtf-ver M26 \\\n              --output /data/$USER/refs/mm39_M26 \\\n              --shared-resources /data/shared/renee \\\n              --tmp-dir /cluster_scratch/$USER/ \\\n              --sif-cache /data/$USER/cache \\\n              --dry-run\n\n# Step 2.) Build new RENEE reference files\nrenee build --ref-fa GRCm39.primary_assembly.genome.fa \\\n              --ref-name mm39 \\\n              --ref-gtf gencode.vM26.annotation.gtf \\\n              --gtf-ver M26 \\\n              --output /data/$USER/refs/mm39_M26 \\\n              --shared-resources /data/shared/renee \\\n              --tmp-dir /cluster_scratch/$USER/ \\\n              --sif-cache /data/$USER/cache\n</code></pre>"},{"location":"RNA-seq/cache/","title":"<code>renee cache</code>","text":""},{"location":"RNA-seq/cache/#1-about","title":"1. About","text":"<p>The <code>renee</code> executable is composed of several inter-related sub commands. Please see <code>renee -h</code> for all available options.</p> <p>This part of the documentation describes options and concepts for <code>renee cache</code> sub command in more detail. With minimal configuration, the <code>cache</code> sub command enables you to cache remote resources for the RENEE pipeline. Caching remote resources allows the pipeline to run in an offline mode.</p> <p><code>renee cache</code> when run successfully submits a SLURM job to the job schedule and quits. <code>squeue</code> can then be used to track the progress of the caching.</p> <p>The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub.</p> <p>Caching remote resources for the RENEE pipeline is fast and easy! In its most basic form, <code>renee cache</code> only has one required input.</p>"},{"location":"RNA-seq/cache/#2-synopsis","title":"2. Synopsis","text":"<pre><code>$ renee cache [-h] --sif-cache SIF_CACHE \\\n                        [--dry-run]\n</code></pre> <p>The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets.</p> <p>A user must provide a directory to cache remote Docker images via the <code>--sif-cache</code> argument. Once the cache has pipeline completed, the local sif cache can be passed to the <code>--sif-cache</code> option of the <code>renee build</code> and <code>renee run</code> subcomand. This enables the build and run pipeline to run in an offline mode.</p> <p>Use you can always use the <code>-h</code> option for information on a specific command.</p>"},{"location":"RNA-seq/cache/#21-required-arguments","title":"2.1 Required Arguments","text":"<p><code>--sif-cache SIF_CACHE</code></p> <p>Path where a local cache of SIFs will be stored. type: path</p> <p>Any images defined in config/containers/images.json will be pulled into the local filesystem. The path provided to this option can be passed to the <code>--sif-cache</code> option of the <code>renee build</code> and <code>renee run</code> subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see renee build and run for more information.</p> <p>Example: <code>--sif-cache /data/$USER/cache</code></p>"},{"location":"RNA-seq/cache/#22-options","title":"2.2 Options","text":"<p>Each of the following arguments are optional and do not need to be provided.</p> <p><code>-h, --help</code></p> <p>Display Help. type: boolean</p> <p>Shows command's synopsis, help message, and an example command</p> <p>Example: <code>--help</code></p> <p><code>--dry-run</code></p> <p>Dry run the pipeline. type: boolean</p> <p>Displays what steps in the pipeline remain or will be run. Does not execute anything!</p> <p>Example: <code>--dry-run</code></p>"},{"location":"RNA-seq/cache/#3-example","title":"3. Example","text":"<pre><code># Step 0.) Grab an interactive node (do not run on head node)\nsrun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\nmodule purge\nmodule load ccbrpipeliner\n\n# Step 1.) Dry run cache to see what will be pulled\nrenee cache --sif-cache /data/$USER/cache \\\n                 --dry-run\n\n# Step 2.) Cache remote resources locally\nrenee cache --sif-cache /data/$USER/cache\n</code></pre>"},{"location":"RNA-seq/gui/","title":"Getting started","text":""},{"location":"RNA-seq/gui/#1-synopsis","title":"1. Synopsis","text":"<p>RENEE pipeline can be executed from either using the command line interface (CLI) or graphical user interface (GUI). GUI offers a more interactive way for the user to provide input and adjust parameter settings. This part of the documentation describes how to run renee using the GUI (with screenshots). See Command Line tab to read more about the <code>renee</code> executable and running RENEE pipeline using the CLI.</p>"},{"location":"RNA-seq/gui/#2-setting-up-renee","title":"2. Setting up RENEE","text":""},{"location":"RNA-seq/gui/#21-login-to-cluster","title":"2.1 Login to cluster","text":"<pre><code># Setup Step 1.) ssh into cluster's head node\n# example below for Biowulf cluster\nssh -Y $USER@biowulf.nih.gov\n</code></pre>"},{"location":"RNA-seq/gui/#22-grab-an-interactive-node","title":"2.2 Grab an interactive node","text":"<p>NOTE: Make sure to add <code>--tunnel</code> flag to the sinteractive command for correct display settings. See details here: https://hpc.nih.gov/docs/tunneling/ </p> <pre><code># Setup Step 2.) Please do not run RENEE on the head node!\n# Grab an interactive node first\nsinteractive --tunnel  --time=12:00:00 --mem=8gb  --cpus-per-task=4\n</code></pre>"},{"location":"RNA-seq/gui/#23-load-ccbrpipeliner-module","title":"2.3 Load <code>ccbrpipeliner</code> module","text":"<p>NOTE: <code>ccbrpipeliner</code> is a custom module created on biowulf which contains various NGS data analysis pipelines developed, tested, and benchmarked by experts at CCBR.</p> <pre><code># Setup Step 3.) Add ccbrpipeliner module\nmodule purge # to reset the module environment\nmodule load ccbrpipeliner\n</code></pre> <p>If the module was loaded correctly, the greetings message should be displayed.</p> <pre><code>[+] Loading ccbrpipeliner  6  ... \n###########################################################################\n            CCBR Pipeliner release 6\n###########################################################################\n    \"ccbrpipeliner\" is a suite of end-to-end pipelines and tools\n    Visit https://github.com/ccbr for more details.\n    Pipelines are available on BIOWULF and FRCE.\n    Tools are available on BIOWULF, HELIX and FRCE.\n\n    The following pipelines/tools will be loaded in this module:\n\n    PIPELINES:\n    RENEE       v2.5        https://ccbr.github.io/RENEE/\n    XAVIER      v3.0        https://ccbr.github.io/XAVIER/\n    CARLISLE    v2.4        https://ccbr.github.io/CARLISLE/\n    CHAMPAGNE   v0.3        https://ccbr.github.io/CHAMPAGNE/\n    CRUISE      v0.1        https://ccbr.github.io/CRUISE/\n    ASPEN       v1.0        https://ccbr.github.io/ASPEN/\n\n    TOOLS:\n    spacesavers2    v0.12       https://ccbr.github.io/spacesavers2/\n    permfix     v0.6        https://github.com/ccbr/permfix/\n\n###########################################################################\n            Thank you for using CCBR Pipeliner\n            Comments/Questions/Requests:\n            CCBR_Pipeliner@mail.nih.gov\n###########################################################################\n</code></pre> <p>To check the current version of RENEE, enter:</p> <pre><code>renee --version\n</code></pre>"},{"location":"RNA-seq/gui/#3-running-renee","title":"3. Running RENEE","text":""},{"location":"RNA-seq/gui/#31-launching-renee-gui","title":"3.1 Launching RENEE GUI","text":"<p>To run the RENEE pipeline from the GUI, simply enter:</p> <pre><code>renee gui\n</code></pre> <p>and it will launch the RENEE window.</p> <p>Note: Please wait until <code>window created!</code> message appears on the terminal.</p> <p></p>"},{"location":"RNA-seq/gui/#32-folder-paths-and-reference-genomes","title":"3.2 Folder paths and reference genomes","text":"<p>To enter the location of the input folder containing FASTQ files and the location where the results should be created, either simply type the absolute paths</p> <p>or use the Browse tab to choose the input and output directories</p> <p></p> <p></p> <p>Next, from the drop down menu select the reference genome (hg38/mm10)</p> <p></p>"},{"location":"RNA-seq/gui/#33-submit-renee-job","title":"3.3 Submit RENEE job","text":"<p>After all the information is filled out, press Submit.</p> <p>If the pipeline detects no errors and the run was submitted, a new window appears that has the output of a \"dry-run\" which summarizes each step of the pipeline.</p> <p></p> <p>Click OK</p> <p>A dialogue box will popup to confirm submitting the job to slurm.</p> <p>Click Yes</p> <p>An email notification will be sent out when the pipeline starts and ends.</p>"},{"location":"RNA-seq/gui/#4-special-instructions-regarding-x11-window-system","title":"4. Special instructions regarding X11 Window System","text":"<p>RENEE GUI natively uses the X11 Window System to run RENEE pipeline and display the graphics on a personal desktop or laptop. The X11 Window System can be used to run a program on Biowulf and display the graphics on a desktop or laptop. However, X11 can be unreliable and fail with many graphics applications used on Biowulf. The HPC staff recommends NoMachine (NX) for users who need to run graphics applications.</p> <p>Please see details here on how to install and connect to Biowulf on your local computer using NoMachine.</p> <p>Once connected to Biowulf using NX, right click to open a terminal connection</p> <p></p> <p>and start an interactive session (with <code>--tunnel</code> flag).</p> <p></p> <p>Similar to the instructions above, load the <code>ccbrpipeliner</code> module and enter <code>renee gui</code> to launch the RENEE gui.</p> <p></p>"},{"location":"RNA-seq/output/","title":"Expected Output","text":"<p>After a successful <code>renee</code> run execution for multisample paired-end data, the following files and folders are created in the output folder.</p> <pre><code>renee_output/\n\u251c\u2500\u2500 bams\n\u251c\u2500\u2500 config \n\u251c\u2500\u2500 config.json # Contains the configuration and parameters used for this specific RENEE run\n\u251c\u2500\u2500 DEG_ALL\n\u251c\u2500\u2500 dryrun.{datetime}.log # Output from the dry-run of the pipeline\n\u251c\u2500\u2500 FQscreen\n\u251c\u2500\u2500 FQscreen2\n\u251c\u2500\u2500 fusions\n\u251c\u2500\u2500 kraken\n\u251c\u2500\u2500 logfiles \n\u251c\u2500\u2500 nciccbr \n\u251c\u2500\u2500 preseq \n\u251c\u2500\u2500 QC\n\u251c\u2500\u2500 QualiMap\n\u251c\u2500\u2500 rawQC\n\u251c\u2500\u2500 Reports\n\u251c\u2500\u2500 resources\n\u251c\u2500\u2500 RSeQC\n\u251c\u2500\u2500 sample1.R1.fastq.gz -&gt; /path/to/input/fastq/files/sample1.R1.fastq.gz\n\u251c\u2500\u2500 sample1.R2.fastq.gz -&gt; /path/to/input/fastq/files/sample1.R2.fastq.gz\n...\n..\n.\n\u251c\u2500\u2500 sampleN.R1.fastq.gz -&gt; /path/to/input/fastq/files/sampleN.R1.fastq.gz\n\u251c\u2500\u2500 sampleN.R2.fastq.gz -&gt; /path/to/input/fastq/files/sampleN.R2.fastq.gz\n\u251c\u2500\u2500 STAR_files\n\u251c\u2500\u2500 trim\n\u2514\u2500\u2500 workflow\n</code></pre>"},{"location":"RNA-seq/output/#folder-details-and-file-descriptions","title":"Folder details and file descriptions","text":""},{"location":"RNA-seq/output/#1-bams","title":"1. <code>bams</code>","text":"<p>Contains the STAR aligned reads for each sample analyzed in the run.</p> <pre><code>/bams/\n\u251c\u2500\u2500 sample1.fwd.bw # forward strand bigwig files suitable for a genomic track viewer like IGV\n\u251c\u2500\u2500 sample1.rev.bw # reverse strand bigwig files \n\u251c\u2500\u2500 sample1.p2.Aligned.toTranscriptome.out.bam # BAM alignments to transcriptome using STAR in two-pass mode\n\u251c\u2500\u2500 sample1.star_rg_added.sorted.dmark.bam # Read groups added and duplicates marked genomic BAM file (using STAR in two-pass mode)\n\u251c\u2500\u2500 sample1.star_rg_added.sorted.dmark.bam.bai\n...\n..\n.\n</code></pre>"},{"location":"RNA-seq/output/#2-config","title":"2. <code>config</code>","text":"<p>Contains config files for the pipeline.</p>"},{"location":"RNA-seq/output/#3-deg_all","title":"3. <code>DEG_ALL</code>","text":"<p>Contains the output from RSEM estimating gene and isoform expression levels for each sample and also combined data matrix with all samples.</p> <pre><code>/DEG_ALL/\n\u251c\u2500\u2500 combined_TIN.tsv # RSeQC logfiles containing transcript integrity number information for all samples\n\u251c\u2500\u2500 RSEM.genes.expected_count.all_samples.txt # Expected gene counts matrix for all samples (useful for downstream differential expression analysis)\n\u251c\u2500\u2500 RSEM.genes.expected_counts.all_samples.reformatted.tsv # Expected gene counts matrix for all samples with reformatted gene symbols (format: ENSEMBLID | GeneName)\n\u251c\u2500\u2500 RSEM.genes.FPKM.all_samples.txt # FPKM Normalized expected gene counts matrix for all samples \n\u251c\u2500\u2500 RSEM.genes.TPM.all_samples.txt # TPM Normalized expected gene counts matrix for all samples\n\u251c\u2500\u2500 RSEM.isoforms.expected_count.all_samples.txt # File containing isoform level expression estimates for all samples.\n\u251c\u2500\u2500 RSEM.isoforms.FPKM.all_samples.txt # FPKM Normalized expected isoform counts matrix for all samples \n\u251c\u2500\u2500 RSEM.isoforms.TPM.all_samples.txt # TPM Normalized expected isoform counts matrix for all samples\n\u251c\u2500\u2500 sample1.RSEM.genes.results # Expected gene counts for sample 1\n\u251c\u2500\u2500 sample1.RSEM.isoforms.results # Expected isoform counts for sample 1\n\u251c\u2500\u2500 sample1.RSEM.stat # RSEM stats for sample 1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sample1.RSEM.cnt \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sample1.RSEM.model\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample1.RSEM.theta\n\u251c\u2500\u2500 sample1.RSEM.time # Run time log for sample 1\n...\n..\n.\n\u251c\u2500\u2500 sampleN.RSEM.genes.results\n\u251c\u2500\u2500 sampleN.RSEM.isoforms.results\n\u251c\u2500\u2500 sampleN.RSEM.stat\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sampleN.RSEM.cnt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sampleN.RSEM.model\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sampleN.RSEM.theta\n\u2514\u2500\u2500 sampleN.RSEM.time\n</code></pre>"},{"location":"RNA-seq/output/#4-fqscreen-and-fqscreen2","title":"4. <code>FQScreen</code> and <code>FQScreen2</code>","text":"<p>These folders contain results from quality-control step to screen for different sources of contamination. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. These results are plotted in the multiQC report.</p>"},{"location":"RNA-seq/output/#5-fusions","title":"5. <code>fusions</code>","text":"<p>Contains gene fusions output for each sample.</p> <pre><code>fusions/\n\u251c\u2500\u2500 sample1_fusions.arriba.pdf\n\u251c\u2500\u2500 sample1_fusions.discarded.tsv # Contains all events that Arriba classified as an artifact or that are also observed in healthy tissue. \n\u251c\u2500\u2500 sample1_fusions.tsv # Contains fusions for sample 1 which pass all of Arriba's filters. The predictions are listed from highest to lowest confidence. \n\u251c\u2500\u2500 sample1.p2.arriba.Aligned.sortedByCoord.out.bam # Sorted BAM file for Arriba's Visualization\n\u251c\u2500\u2500 sample1.p2.arriba.Aligned.sortedByCoord.out.bam.bai\n\u251c\u2500\u2500 sample1.p2.Log.final.out # STAR final log file\n\u251c\u2500\u2500 sample1.p2.Log.out # STAR runtime log file\n\u251c\u2500\u2500 sample1.p2.Log.progress.out # log files\n\u251c\u2500\u2500 sample1.p2.Log.std.out # STAR runtime output log\n\u251c\u2500\u2500 sample1.p2.SJ.out.tab #  Summarizes the high confidence splice junctions for sample 1\n\u251c\u2500\u2500 sample1.p2._STARgenome # Extra files generated during STAR aligner \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 exonGeTrInfo.tab\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 transcriptInfo.tab \n\u251c\u2500\u2500 sample1.p2._STARpass1 # Extra files generated during STAR first pass \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 .\n...\n..\n.\n</code></pre>"},{"location":"RNA-seq/output/#6-kraken","title":"6. <code>kraken</code>","text":"<p>Contains per sample kraken output files which is a Quality-control step to assess for potential sources of microbial contamination. Kraken is used in conjunction with Krona to produce an interactive reports stored in <code>.krona.html</code> files. These results are present in the multiQC report.</p>"},{"location":"RNA-seq/output/#7-logfiles","title":"7. <code>logfiles</code>","text":"<p>Contains logfiles for the entire RENEE run, job error/output files for each individual job that was submitted to SLURM, and some other stats generated by different software. Important to diagnose errors if the pipeline fails. The per sample stats information is present in the mulitQC report. </p> <pre><code>/logfiles/\n\u251c\u2500\u2500 master.log # Logfile for the main (master) RENEE job\n\u251c\u2500\u2500 mjobid.log # SLURM JOBID for the master RENEE job\n\u251c\u2500\u2500 runtime_statistics.json # Runtime statistics for each rule in the RENEE run\n\u251c\u2500\u2500 sample1.flagstat.concord.txt # sample mapping stats\n\u251c\u2500\u2500 sample1.p2.Log.final.out # sample STAR alignment stats\n\u251c\u2500\u2500 sample1.RnaSeqMetrics.txt # sample stats collected by Picard CollectRnaSeqMetrics\n\u251c\u2500\u2500 sample1.star.duplic # Mark duplicate metrics\n...\n..\n.\n\u251c\u2500\u2500 slurmfiles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 {MASTER_JOBID}.{JOBID}.{rule}.{wildcards}.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 {MASTER_JOBID}.{JOBID}.{rule}.{wildcards}.err\n\u2502\u00a0\u00a0 ...\n\u2502\u00a0\u00a0 ..\n\u2502\u00a0\u00a0 .\n\u251c\u2500\u2500 snakemake.log # The snakemake log file which documents the entire pipeline log\n\u251c\u2500\u2500 snakemake.log.jobby # Detailed summary report for each individual job. \n\u2514\u2500\u2500 snakemake.log.jobby.short # Short summary report for each individual job. \n</code></pre>"},{"location":"RNA-seq/output/#8-nciccbr","title":"8. <code>nciccbr</code>","text":"<p>Contain Arriba resources for gene fusion estimation. Manually curated and only exist for a few reference genomes (mm10, hg38, hg19).</p>"},{"location":"RNA-seq/output/#9-preseq","title":"9. <code>preseq</code>","text":"<p>Contains library complexity curves for each sample. These results are part of the multiQC report.</p>"},{"location":"RNA-seq/output/#10-qc-and-rawqc","title":"10. <code>QC</code> and <code>rawQC</code>","text":"<p>Contains per sample output from FastQC for raw and adapter trimmed fastq files with insert size estimates. These results are part of the multiQC report.</p>"},{"location":"RNA-seq/output/#11-qualimap","title":"11. <code>QualiMap</code>","text":"<p>Contains per sample output for Quality-control step to assess various post-alignment metrics and a secondary method to calculate insert size. These results are part of the multiQC report.</p>"},{"location":"RNA-seq/output/#12-reports","title":"12. <code>Reports</code>","text":"<p>Contains the multiQC report which visually summarizes the quality control metrics and other statistics for each sample (<code>multiqc_report.html</code>). All the data tables used to generate the multiQC report is available in the <code>multiqc_data</code> folder.  The <code>RNA_report.html</code> file is an interactive report the aggregates sample quality-control metrics across all samples. This interactive report to allow users to identify problematic samples prior to downstream analysis. It uses flowcell and lane information from the FastQ file.</p>"},{"location":"RNA-seq/output/#13-resources","title":"13. <code>resources</code>","text":"<p>Contains resources necessary to run the RENEE pipeline.</p>"},{"location":"RNA-seq/output/#14-rseqc","title":"14. <code>RSeQC</code>","text":"<p>Contains various QC metrics for each sample collected by RSeQC. These results are part of the multiQC report.</p>"},{"location":"RNA-seq/output/#15-star_files","title":"15. <code>STAR_files</code>","text":"<p>Contains log files, splice junction tab file (<code>SJ.out.tab</code>), and <code>ReadsPerGene.out.tab</code> file, and other various output files for each sample generated by STAR aligner.</p>"},{"location":"RNA-seq/output/#16-trim","title":"16. <code>trim</code>","text":"<p>Contains adapter trimmed FASTQ files for each sample used for all the downstream analysis.</p> <pre><code>trim\n\u251c\u2500\u2500 sample1.R1.trim.fastq.gz\n\u251c\u2500\u2500 sample1.R2.trim.fastq.gz\n...\n..\n.\n\u251c\u2500\u2500 sampleN.R1.trim.fastq.gz\n\u2514\u2500\u2500 sampleN.R2.trim.fastq.gz\n</code></pre>"},{"location":"RNA-seq/output/#17-workflow","title":"17. <code>workflow</code>","text":"<p>Contains the RENEE pipeline workflow.</p>"},{"location":"RNA-seq/run/","title":"<code>renee run</code>","text":""},{"location":"RNA-seq/run/#1-about","title":"1. About","text":"<p>The <code>renee</code> executable is composed of several inter-related sub commands. Please see <code>renee -h</code> for all available options.</p> <p>This part of the documentation describes options and concepts for <code>renee run</code> sub command in more detail. With minimal configuration, the <code>run</code> sub command enables you to start running the data processing and quality-control pipeline.</p> <p>Setting up the RENEE pipeline is fast and easy! In its most basic form, <code>renee run</code> only has three required inputs.</p>"},{"location":"RNA-seq/run/#2-synopsis","title":"2. Synopsis","text":"<pre><code>$ renee run [--help] \\\n            [--small-rna] [--star-2-pass-basic] \\\n            [--dry-run] [--mode {slurm, local}] \\\n            [--shared-resources SHARED_RESOURCES] \\\n            [--singularity-cache SINGULARITY_CACHE] \\\n            [--sif-cache SIF_CACHE] \\\n            [--tmp-dir TMP_DIR] \\\n            [--threads THREADS] \\\n            --input INPUT [INPUT ...] \\\n            --output OUTPUT \\\n            --genome {hg38_36, mm10_M21, ...}\n</code></pre> <p>The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets.</p> <p>A user must provide a list of FastQ files (globbing is supported) to analyze via <code>--input</code> argument, an output directory to store results via <code>--output</code> argument and select reference genome for alignment and annotation via the <code>--genome</code> argument which is <code>hg38_36</code> by default. If you are running the pipeline outside of Biowulf, you will need to additionally provide the the following options: <code>--shared-resources</code>, <code>--tmp-dir</code>. More information about each of these options can be found below.</p> <p>Use you can always use the <code>-h</code> option for information on a specific sub command.</p>"},{"location":"RNA-seq/run/#21-required-arguments","title":"2.1 Required Arguments","text":"<p>Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code.</p> <p><code>--input INPUT [INPUT ...]</code></p> <p>Input FastQ file(s) to process. type: file</p> <p>One or more FastQ files can be provided. From the command-line, each FastQ file should separated by a space. Globbing is supported! This makes selecting FastQ files easier. Input FastQ files should be gzipp-ed. The pipeline supports single-end and pair-end RNA-seq data; however, the pipeline will not process a mixture of single-end and paired-end samples together. If you have a mixture of single-end and pair-end samples to process, please process them as two separate instances of the RENEE pipeline (with two separate output directories).</p> <p>Example: <code>--input .tests/*.R?.fastq.gz</code></p> <p><code>--output OUTPUT</code></p> <p>Path to an output directory. type: path</p> <p>This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be initialized automatically.</p> <p>Example: <code>--output /data/$USER/RNA_hg38</code></p> <p><code>--genome {hg38_36,mm10_M21,custom.json,...}</code></p> <p>Reference genome. type: string or file</p> <p>This option defines the reference genome for your set of samples. The default is <code>hg38_36</code>. On Biowulf, RENEE does comes bundled with pre built reference files for human and mouse samples; however, it is worth noting that the pipeline does accept a custom reference genome built with the build sub command. Building a new reference genome is easy! You can create a custom reference genome with a single command. This is extremely useful when working with non-model organisms. New users can reference the documentation's getting started section to see how a reference genome is built.</p> <p>Pre built Option Pre build genomes are available with RENEE. Please see the resources page for more information about each pre built option.</p> <p>Custom Option A user can also supply a custom reference genome built with the build sub command. Please supply the custom reference JSON file that was generated by the build sub command. The name of this custom reference JSON file is dependent on the values provided to the following renee build args, <code>--ref-name REF_NAME</code> and <code>--gtf-ver GTF_VER</code>, where the name of the provided custom reference JSON file would be: <code>{REF_NAME}_{GTF_VER}.json</code>.</p> <p>Example: <code>--genome hg38_36</code> OR <code>--genome /data/${USER}/hg38_36/hg38_36.json</code></p>"},{"location":"RNA-seq/run/#22-analysis-options","title":"2.2 Analysis Options","text":"<p><code>--small-rna</code></p> <p>Run STAR using ENCODE's recommendations for small RNA. type: boolean</p> <p>This option should only be used with small RNA libraries. These are rRNA-depleted libraries that have been size selected to contain fragments shorter than 200bp. Size selection enriches for small RNA species such as miRNAs, siRNAs, or piRNAs. Also, this option should not be combined with the star 2-pass basic option. If the two options are combined, STAR will run in pass basic mode. This means that STAR will not run with ENCODE's recommendations for small RNA alignment. As so, please take caution not to combine both options together.</p> <p>Please note: This option is only supported with single-end data.</p> <p>Example: <code>--small-rna</code></p> <p><code>--star-2-pass-basic</code></p> <p>Run STAR in per sample 2-pass mapping mode. type: boolean</p> <p>It is recommended to use this option when processing a set of unrelated samples or when processing samples in a clinical setting. It is not adivsed to use this option for a study with multiple related samples.</p> <p>By default, the pipeline ultilizes a multi sample 2-pass mapping approach where the set of splice junctions detected across all samples are provided to the second pass of STAR. This option overrides the default behavior so each sample will be processed in a per sample two-pass basic mode. This option should not be combined with the small RNA option. If the two options are combined, STAR will run in pass basic mode.</p> <p>Example: <code>--star-2-pass-basic</code></p>"},{"location":"RNA-seq/run/#23-orchestration-options","title":"2.3 Orchestration Options","text":"<p>Each of the following arguments are optional and do not need to be provided.</p> <p><code>--dry-run</code></p> <p>Dry run the pipeline. type: boolean</p> <p>Displays what steps in the pipeline remain or will be run. Does not execute anything!</p> <p>Example: <code>--dry-run</code></p> <p><code>--mode {slurm,local}</code></p> <p>Execution Method. &gt; type: string default: slurm</p> <p>Execution Method. Defines the mode or method of execution. Valid mode options include: slurm or local.</p> <p>local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode.</p> <p>slurm The slurm execution method will submit jobs to a cluster using a slurm + singularity backend. This method will automatically submit the master job to the cluster. It is recommended running RENEE in this mode as execution will be significantly faster in a distributed environment.</p> <p>Example: <code>--mode slurm</code></p> <p><code>--shared-resources SHARED_RESOURCES</code></p> <p>Local path to shared resources. type: path</p> <p>The pipeline uses a set of shared reference files that can be re-used across reference genomes. These currently include reference files for kraken and FQScreen. These reference files can be downloaded with the build sub command's <code>--shared-resources</code> option. With that being said, these files only need to be downloaded once. We recommend storing this files in a shared location on the filesystem that other people can access. If you are running the pipeline on Biowulf, you do NOT need to download these reference files! They already exist on the filesystem in a location that anyone can access; however, if you are running the pipeline on another cluster or target system, you will need to download the shared resources with the build sub command, and you will need to provide this option every time you run the pipeline. Please provide the same path that was provided to the build sub command's --shared-resources option. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. For more information about how to download shared resources, please reference the build sub command's <code>--shared-resources</code> option.</p> <p>Example: <code>--shared-resources /data/shared/renee</code></p> <p><code>--singularity-cache SINGULARITY_CACHE</code></p> <p>Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: <code>--output OUTPUT/.singularity</code></p> <p>Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the <code>--output</code> argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the <code>--sif-cache</code> option to create a shareable resource.</p> <p>Example: <code>--singularity-cache /data/$USER/.singularity</code></p> <p><code>--sif-cache SIF_CACHE</code></p> <p>Path where a local cache of SIFs are stored. type: path</p> <p>Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The <code>renee cache</code> subcommand can be used to create a local SIF cache. Please see <code>renee cache</code> for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running RENEE with this option when ever possible.</p> <p>Example: <code>--singularity-cache /data/$USER/SIFs</code></p> <p><code>--tmp-dir TMP_DIR</code></p> <p>Path on the file system for writing temporary files. type: path default: <code>/lscratch/$SLURM_JOBID</code></p> <p>Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' on NIH's Biowulf cluster and 'OUTPUT' on the FRCE cluster. However, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject avariable into this string that should NOT be expanded,please quote this options value in single quotes.</p> <p>Example: --tmp-dir '/cluster_scratch/$USER/'</p> <p><code>--threads THREADS</code></p> <p>Max number of threads for each process. type: int default: 2</p> <p>Max number of threads for each process. This option is more applicable when running the pipeline with <code>--mode local</code>. It is recommended setting this value to the maximum number of CPUs available on the host machine.</p> <p>Example: <code>--threads 12</code></p>"},{"location":"RNA-seq/run/#24-misc-options","title":"2.4 Misc Options","text":"<p>Each of the following arguments are optional and do not need to be provided.</p> <p><code>-h, --help</code></p> <p>Display Help. type: boolean</p> <p>Shows command's synopsis, help message, and an example command</p> <p>Example: <code>--help</code></p>"},{"location":"RNA-seq/run/#3-example","title":"3. Example","text":""},{"location":"RNA-seq/run/#31-biowulf","title":"3.1 Biowulf","text":"<p>On Biowulf getting started with the pipeline is fast and easy! The pipeline comes bundled with pre-built human and mouse reference genomes. In the example below, we will use the pre-built human reference genome.</p> <pre><code># Step 0.) Grab an interactive node (do not run on head node)\nsrun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\nmodule purge\nmodule load ccbrpipeliner\n\n# Step 1.) Dry run pipeline with provided test data\nrenee run --input .tests/*.R?.fastq.gz \\\n               --output /data/$USER/RNA_hg38 \\\n               --genome hg38_36 \\\n               --mode slurm \\\n               --star-2-pass-basic \\\n               --sif-cache /data/OpenOmics/SIFs/ \\\n               --dry-run\n\n# Step 2.) Run RENEE pipeline\n# The slurm mode will submit jobs to the cluster.\n# It is recommended running renee in this mode.\nrenee run --input .tests/*.R?.fastq.gz \\\n               --output /data/$USER/RNA_hg38 \\\n               --genome hg38_36 \\\n               --mode slurm \\\n                --sif-cache /data/OpenOmics/SIFs/ \\\n               --star-2-pass-basic\n</code></pre>"},{"location":"RNA-seq/run/#32-generic-slurm-cluster","title":"3.2 Generic SLURM Cluster","text":"<p>Running the pipeline outside of Biowulf is easy; however, there are a few extra steps you must first take. Before getting started, you will need to build reference files for the pipeline. Please note when running the build sub command for the first time, you will also need to provide the <code>--shared-resources</code> option. This option will download our kraken2 database and bowtie2 indices for FastQ Screen. The path provided to this option should be provided to the <code>--shared-resources</code> option of the run sub command. Next, you will also need to provide a path to write temporary output files via the <code>--tmp-dir</code> option. We also recommend providing a path to a SIF cache. You can cache software containers locally with the cache sub command.</p> <pre><code># Step 0.) Grab an interactive node (do not run on head node)\nsrun -N 1 -n 1 --time=2:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\n# Add snakemake and singularity to $PATH,\n# This step may vary across clusters, you\n# can reach out to a sys admin if snakemake\n# and singularity are not installed.\nmodule purge\n# Replace the following:\n# module load ccbrpipeliner\n# with module load statements that load\n# python &gt;= 3.7,\n# snakemake, and\n# singularity\n# before running renee\n# Also, ensure that the `renee` execulable is in PATH\n\n# Step 1.) Dry run pipeline with provided test data\nrenee run --input .tests/*.R?.fastq.gz \\\n               --output /data/$USER/RNA_hg38 \\\n               --genome /data/$USER/hg38_36/hg38_36.json \\\n               --mode slurm \\\n               --sif-cache /data/$USER/cache \\\n               --star-2-pass-basic \\\n               --shared-resources /data/shared/renee \\\n               --tmp-dir /cluster_scratch/$USER/ \\\n               --dry-run\n\n# Step 2.) Run RENEE pipeline\n# The slurm mode will submit jobs to the cluster.\n# It is recommended running renee in this mode.\nrenee run --input .tests/*.R?.fastq.gz \\\n               --output /data/$USER/RNA_hg38 \\\n               --genome /data/$USER/hg38_36/hg38_36.json \\\n               --mode slurm \\\n               --sif-cache /data/$USER/cache \\\n               --star-2-pass-basic \\\n               --shared-resources /data/shared/renee \\\n               --tmp-dir /cluster_scratch/$USER/ \\\n               --dry-run\n</code></pre>"},{"location":"RNA-seq/unlock/","title":"<code>renee unlock</code>","text":""},{"location":"RNA-seq/unlock/#1-about","title":"1. About","text":"<p>The <code>renee</code> executable is composed of several inter-related sub commands. Please see <code>renee -h</code> for all available options.</p> <p>This part of the documentation describes options and concepts for <code>renee unlock</code> sub command in more detail. With minimal configuration, the <code>unlock</code> sub command enables you to unlock a pipeline output directory.</p> <p>If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: <code>Error: Directory cannot be locked</code>.</p> <p>Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command.</p> <p>Unlocking an RENEE pipeline output directory is fast and easy! In its most basic form, <code>renee run</code> only has one required inputs.</p>"},{"location":"RNA-seq/unlock/#2-synopsis","title":"2. Synopsis","text":"<pre><code>$ renee unlock [-h] --output OUTPUT\n</code></pre> <p>The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets.</p> <p>A user must provide an output directory to unlock via <code>--output</code> argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it.</p> <p>Use you can always use the <code>-h</code> option for information on a specific command.</p>"},{"location":"RNA-seq/unlock/#21-required-arguments","title":"2.1 Required Arguments","text":"<p><code>--output OUTPUT</code></p> <p>Output directory to unlock. type: path</p> <p>Path to a previous run's output directory to unlock. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: <code>--output /data/$USER/RNA_hg38</code></p>"},{"location":"RNA-seq/unlock/#22-options","title":"2.2 Options","text":"<p>Each of the following arguments are optional and do not need to be provided.</p> <p><code>-h, --help</code></p> <p>Display Help. type: boolean</p> <p>Shows command's synopsis, help message, and an example command</p> <p>Example: <code>--help</code></p>"},{"location":"RNA-seq/unlock/#3-example","title":"3. Example","text":"<pre><code># Step 0.) Grab an interactive node (do not run on head node)\nsrun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb  --cpus-per-task=4 --pty bash\nmodule purge\nmodule load ccbrpipeliner\n\n# Step 1.) Unlock a pipeline output directory\nrenee unlock --output /data/$USER/RNA_hg38\n</code></pre>"},{"location":"dev/coming-soon/","title":"Coming Soon","text":"<p>This page is under construction, and our team is actively working on bringing you the most up-to-date documentation.</p> <p>Thank you for your patience!</p>"},{"location":"dev/lorem_ipsum/","title":"Lorem ipsum","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>"},{"location":"dev/lorem_ipsum/#h2-heading","title":"h2 Heading","text":""},{"location":"dev/lorem_ipsum/#h3-heading","title":"h3 Heading","text":""},{"location":"dev/lorem_ipsum/#h4-heading","title":"h4 Heading","text":""},{"location":"dev/lorem_ipsum/#h5-heading","title":"h5 Heading","text":""},{"location":"dev/lorem_ipsum/#h6-heading","title":"h6 Heading","text":""},{"location":"dev/lorem_ipsum/#horizontal-rules","title":"Horizontal Rules","text":""},{"location":"dev/lorem_ipsum/#emphasis","title":"Emphasis","text":"<p>This is bold text</p> <p>This is bold text</p> <p>This is italic text</p> <p>This is italic text</p> <p>Strikethrough</p>"},{"location":"dev/lorem_ipsum/#blockquotes","title":"Blockquotes","text":"<p>Blockquotes can also be nested...</p> <p>...by using additional greater-than signs right next to each other...</p> <p>...or with spaces between arrows.</p>"},{"location":"dev/lorem_ipsum/#lists","title":"Lists","text":"<p>Unordered</p> <ul> <li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li> <li>Sub-lists are made by indenting 2 spaces:</li> <li>Marker character change forces new list start:<ul> <li>Ac tristique libero volutpat at</li> <li>Facilisis in pretium nisl aliquet</li> <li>Nulla volutpat aliquam velit</li> </ul> </li> <li>Very easy!</li> </ul> <p>Ordered</p> <ol> <li>Lorem ipsum dolor sit amet</li> <li>Consectetur adipiscing elit</li> <li> <p>Integer molestie lorem at massa</p> </li> <li> <p>You can use sequential numbers...</p> </li> <li>...or keep all the numbers as <code>1.</code></li> </ol> <p>Start numbering with offset:</p> <ol> <li>foo</li> <li>bar</li> </ol>"},{"location":"dev/lorem_ipsum/#code","title":"Code","text":"<p>Inline <code>code</code></p> <p>Indented code</p> <pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre> <p>Block code \"fences\"</p> <pre><code>Sample text here...\n</code></pre> <p>Syntax highlighting</p> <pre><code>var foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n</code></pre>"},{"location":"dev/lorem_ipsum/#tables","title":"Tables","text":"Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. <p>Right-aligned columns</p> Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files."},{"location":"dev/lorem_ipsum/#links","title":"Links","text":"<p>link text</p> <p>link with title</p>"},{"location":"dev/lorem_ipsum/#images","title":"Images","text":"<p>Like links, Images also have a footnote style syntax</p> <p></p> <p>With a reference later in the document defining the URL location:</p>"},{"location":"dev/lorem_ipsum/#plugins","title":"Plugins","text":"<p>The killer feature of <code>markdown-it</code> is very effective support of syntax plugins.</p>"},{"location":"dev/lorem_ipsum/#footnotes","title":"Footnotes","text":"<p>Footnote 1 link<sup>1</sup>.</p> <p>Footnote 2 link<sup>2</sup>.</p> <p>Inline footnote^[Text of inline footnote] definition.</p> <p>Duplicated footnote reference<sup>2</sup>.</p>"},{"location":"dev/lorem_ipsum/#definition-lists","title":"Definition lists","text":"Term 1 <p>Definition 1 with lazy continuation.</p> Term 2 with inline markup <p>Definition 2</p> <pre><code>{ some code, part of Definition 2 }\n</code></pre> <p>Third paragraph of definition 2.</p> <p>Compact style:</p> <p>Term 1 ~ Definition 1</p> <p>Term 2 ~ Definition 2a ~ Definition 2b</p> <ol> <li> <p>Footnote can have markup</p> <p>and multiple paragraphs.\u00a0\u21a9</p> </li> <li> <p>Footnote text.\u00a0\u21a9\u21a9</p> </li> </ol>"}]}