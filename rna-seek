#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""RNA-seek: an highly reproducible and portable RNA-seq pipeline
About:
    This is the main entry for the RNA-seek pipeline.
USAGE:
	$ rna-seek <run|unlock> [OPTIONS]
Example:
    $ rna-seek run --input .tests/*.R?.fastq.gz --output /scratch/$USER/RNA_hg38 --genome hg38 --mode local
"""

from __future__ import print_function
import sys, os

__author__ = 'Skyler Kuhn'
__version__ = 'v0.0.1'
__email__ = 'kuhnsa@nih.gov'


def exists(testpath):
    """Checks if file exists on the local filesystem.
    @param parser <argparse.ArgumentParser() object>:
        argparse parser object
    @param testpath <str>:
        Name of file/directory to check
    @return does_exist <boolean>:
        True when file/directory exists, False when file/directory does not exist
    """
    does_exist = True
    if not os.path.exists(testpath):
        does_exist = False # File or directory does not exist on the filesystem

    return does_exist


def permissions(parser, filename, *args, **kwargs):
    """Checks permissions using os.access() to see the user is authorized to access
    a file/directory. Checks for existence, readability, writability and executability via:
    os.F_OK (tests existence), os.R_OK (tests read), os.W_OK (tests write), os.X_OK (tests exec).
    @param parser <argparse.ArgumentParser() object>:
        Argparse parser object
    @param filename <str>:
        Name of file to check
    @return filename <str>:
        If file exists and user can read from file
    """
    if not exists(filename):
        parser.error("File '{}' does not exists! Failed to provided vaild input.".format(filename))

    if not os.access(filename, *args, **kwargs):
        parser.error("File '{}' exists, but cannot read file due to permissions!".format(filename))

    return filename


def _cp_r_safe_(source, target, resources = []):
    """Private function: Given a list paths it will recursively copy each to the
    target location. If a target path already exists, it will NOT over-write the
    existing paths data.
    @param resources <list[str]>:
        List of paths to copy over to target location
    @params source <str>:
        Add a prefix PATH to each resource
    @param target <str>:
        Target path to copy templates and required resources
    """
    from shutil import copytree

    for resource in resources:
        destination = os.path.join(target, resource)
        if not exists(destination):
            # Required resources do not exist
            copytree(os.path.join(source, resource), destination)


def rename(filename):
    """Dynamically renames FastQ file to have one of the following extensions: *.R1.fastq.gz, *.R2.fastq.gz
    To automatically rename the fastq files, a few assumptions are made. If the extension of the
    FastQ file cannot be infered, an exception is raised telling the user to fix the filename
    of the fastq files.
    @param filename <str>:
        Original name of file to be renamed
    @return filename <str>:
        A renamed FastQ filename
    """
    import re

    # Covers common extensions from SF, SRA, EBI, TCGA, and external sequencing providers
    # key = regex to match string and value = how it will be renamed
    extensions = {
        # Matches: _R[12]_fastq.gz, _R[12].fastq.gz, _R[12]_fq.gz, etc.
        ".R1.f(ast)?q.gz$": ".R1.fastq.gz",
        ".R2.f(ast)?q.gz$": ".R2.fastq.gz",
        # Matches: _R[12]_001_fastq_gz, _R[12].001.fastq.gz, _R[12]_001.fq.gz, etc.
        # Capture lane information as named group
        ".R1.(?P<lane>...).f(ast)?q.gz$": ".R1.fastq.gz",
        ".R2.(?P<lane>...).f(ast)?q.gz$": ".R2.fastq.gz",
        # Matches: _[12].fastq.gz, _[12].fq.gz, _[12]_fastq_gz, etc.
        "_1.f(ast)?q.gz$": ".R1.fastq.gz",
        "_2.f(ast)?q.gz$": ".R2.fastq.gz"
    }

    if filename.endswith('.R1.fastq.gz') or filename.endswith('.R2.fastq.gz'):
        # Filename is already in the correct format
        return filename

    converted = False
    for regex, new_ext in extensions.items():
        matched = re.search(regex, filename)
        if matched:
            # regex matches with a pattern in extensions
            converted = True
            # Try to get substring for named group lane, retain this in new file extension
            # Come back to this later, I am not sure if this is necessary
            # That string maybe static (i.e. always the same)
            # https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/NamingConvention_FASTQ-files-swBS.htm#
            try: new_ext = "_{}{}".format(matched.group('lane'), new_ext)
            except IndexError: pass # Does not contain the named group lane

            filename = re.sub(regex, new_ext, filename)
            break # only rename once

    if not converted:
        raise NameError("""\n\tFatal: Failed to rename provided input '{}'!
        Cannot determine the extension of the user provided input file.
        Please rename the file list above before trying again.
        Here is example of acceptable input file extensions:
          sampleName.R1.fastq.gz      sampleName.R2.fastq.gz
          sampleName_R1_001.fastq.gz  sampleName_R1_001.fastq.gz
          sampleName_1.fastq.gz       sampleName_2.fastq.gz
        Please also check that your input files are gzipped?
        If they are not, please gzip them before proceeding again.
        """.format(filename, sys.argv[0])
        )

    return filename


def _sym_safe_(input_data, target):
    """Creates re-named symlinks for each FastQ file provided
    as input. If a symlink already exists, it will not try to create a new symlink.
    @param input_data List[<str>]:
        List of input files to symlink to target location
    @param target <str>:
        Target path to copy templates and required resources
    """
    for file in input_data:
        filename = os.path.basename(file)
        renamed = os.path.join(target, rename(filename))

        if not exists(renamed):
            # Create a symlink if it does not already exist
            os.symlink(file, renamed)



def initialize(sub_args, repo_path, output_path):
    """Initialize the output directory and copy over required pipeline resources.
    If user provides a output directory path that already exists on the filesystem
    as a file (small chance of happening but possible), a OSError is raised. If the
    output directory PATh already EXISTS, it will not try to create the directory.
    If a resource also already exists in the output directory (i.e. output/workflow),
    it will not try to copy over that directory. In the future, it maybe worth adding
    an optional cli arg called --force, that can modifiy this behavior.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    @param repo_path <str>:
        Path to RNA-seek source code and its templates
    @param output_path <str>:
        Pipeline output path, created if it does not exist
    """
    if not exists(output_path):
        # Pipleine output directory does not exist on filesystem
        os.makedirs(output_path)

    elif exists(output_path) and os.path.isfile(output_path):
        # Provided Path for pipleine output directory exists as file
        raise OSError("""\n\tFatal: Failed to create provided pipeline output directory!
        User provided --ouput PATH already exists on the filesystem as a file.
        Please run {} again with a different --output PATH.
        """.format(sys.argv[0])
        )

    # Copy over templates are other required resources
    required_resources = ['workflow', 'resources', 'config']

    _cp_r_safe_(source = repo_path, target = output_path, resources = required_resources)
    _sym_safe_(input_data = sub_args.input, target = output_path)


def setup(sub_args):
    """Setup the pipeline for execution and creates config file from templates
    """
    pass


def dryrun(sub_args):
    """Dryruns the pipeline to ensure there are no errors prior to runnning.
    """
    pass


def run(sub_args):
    """Initialize, setup and run the RNA-seek pipeline.
    Calls initialize() to create output directory and copy over pipeline resources,
    setup() to create the pipeline config file, dryrun() to ensure their are no issues
    before running the pipeline, and finally run() to execute the Snakemake workflow.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    """
    print(sub_args)

    # Get PATH to RNA-seek git repository for copying over pipeline resources
    git_repo = os.path.dirname(os.path.abspath(__file__))

    # Initialize working directory, copy over required pipeline resources
    initialize(sub_args, repo_path = git_repo, output_path = sub_args.output)



def unlock(sub_args):
    """Unlocks a previous runs output directory. If snakemake fails ungracefully,
    it maybe required to unlock the working directory before proceeding again.
    This is rare but it does occasionally happen.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for unlock sub-command
    """
    print(sub_args)


def parsed_arguments():
    """Parses user-provided command-line arguments. Requires argparse package.
    """
    import argparse

    # Create a top-level parser
    parser = argparse.ArgumentParser(description = 'RNA-seek: \
                                                    a highly-reproducible RNA-seq pipeline')
    # Create sub-command parser
    subparsers = parser.add_subparsers()

    # Options for the "run" sub-command
    subparser_run = subparsers.add_parser('run',
                                            help = 'Run the RNA-seek pipeline with your FastQ files.',
                                            description = 'This section explains \
                                                            concepts and options for \
                                                            running the RNA-seek pipeline.\
                                                            Visit "https://github.com/skchronicles/RNA-seek" \
                                                            for more information.')
    # Input FastQ files
    subparser_run.add_argument('--input',
                                # Check if the file exists and if it is readable
                                type = lambda file: permissions(parser, file, os.R_OK),
                                required = True,
                                nargs = '+',
                                help = '<Required> Input FastQ file(s) to process. \
                                        One or multiple FastQ files can be provided. \
                                        The pipeline supports single-end and pair-end RNA-seq data.\
                                        Example: --input .tests/*.R?.fastq.gz')
    # Output Directory (analysis working directory)
    subparser_run.add_argument('--output',
                                type = str,
                                required = True,
                                help = '<Required> Path to an output directory. \
                                        This location is where the pipeline will create all of \
                                        its output files. If the user-provided working directory \
                                        has not been initialized, it will automatically be created. \
                                        Example: --output /scratch/$USER/RNA_hg38')
    # Reference Genome (to dynamically select reference files)
    subparser_run.add_argument('--genome',
                                type = str,
                                required = True,
                                choices = ['hg38', 'mm10'],
                                help = '<Required> Reference Genome. \
                                        This is the reference genome or assembly to used for selecting \
                                        reference files. The pipeline currently supports human and mouse data. \
                                        Please select from one of the following options: hg38 or mm10. \
                                        hg38 uses the following annotation: Gencode Release 30. \
                                        mm10 uses the following annotation: Gencode Release M21. \
                                        Please note: hg38 is a human reference genome and \
                                        mm10 is a mouse reference genome. \
                                        Example: --genome hg38')
    # Execution Method (run locally on a compute node, submit to SLURM job scheduler, etc.)
    subparser_run.add_argument('--mode',
                                type = str,
                                required = False,
                                default = "local",
                                choices = ['local', 'slurm'],
                                help = '<Optional> Execution Method [Default: local]. \
                                        Defines the mode or method of execution. \
                                        Vaild mode options include: local or slurm. \
                                        local: uses local method of execution. \
                                        local executions will run serially on compute \
                                        instance. This is useful for testing, debugging, \
                                        or when a users does not have access to a high \
                                        performance computing environment. If this option is \
                                        not provided, it will default to a local execution mode. \
                                        slurm: uses slurm and singularity backend. \
                                        The slurm execution method will submit jobs to a cluster. \
                                        It is recommended running RNA-seek in this mode as execution will \
                                        be significantly faster in a distributed environment. \
                                        Example: --mode slurm')

    # Dry-run (do not execute the workflow)
    subparser_run.add_argument('--dry-run',
                                action = 'store_true',
                                required = False,
                                default = False,
                                help = '<Optional> Do not execute anything, \
                                and only display what steps in the pipeline remain or will \
                                be run [Default: False].')

    # Options for the "run" sub-command
    subparser_unlock = subparsers.add_parser('unlock',
                                            help = 'Unlocks a previous runs output directory.',
                                            description = 'If the pipeline fails ungracefully, it maybe \
                                                            required to unlock the working directory before \
                                                            proceeding again. \
                                                            Please verify that the pipeline is not running before \
                                                            running this command. If the pipeline is still running, \
                                                            the workflow manager will report the working directory \
                                                            is locked. This is normal behavior. Do NOT run this command \
                                                            if the pipeline is still running.')
    # Output Directory (analysis working directory)
    subparser_unlock.add_argument('--output',
                                type = str,
                                required = True,
                                help = "<Required> Path to a previous run's output directory to unlock. \
                                        This will remove a lock on the working directory. \
                                        Please verify that the pipeline is not running before \
                                        running this command. \
                                        Example: --output /scratch/$USER/RNA_hg38")


    # Define run() as handler for sub-parser
    subparser_run.set_defaults(func = run)
    subparser_unlock.set_defaults(func = unlock)

    # Parse command-line args
    args = parser.parse_args()
    return args

def main():

    # Collect args for sub-command
    args = parsed_arguments()

    # Mediator method to call sub-command's set handler function
    args.func(args)


if __name__ == '__main__':
    main()
